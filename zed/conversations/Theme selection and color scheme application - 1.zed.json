{"id":"d0bcf0c4-014e-40d2-9b9c-52a00843a34d","zed":"context","version":"0.4.0","text":"How to get the selected theme value from the dropdown to change the base colors, cursor colors, and color palette\n```ts ghostty-config/src/lib/stores/config.svelte.ts\nimport {dev} from \"$app/environment\";\nimport settings, {type KeybindString} from \"$lib/data/settings\";\nimport type {HexColor} from \"$lib/utils/colors\";\n// import defs from \"../data/defaults.json\";\n\n// TODO: find a good way to properly type the config\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaults: Partial<Record<keyof DefaultConfig, any>> = {};\n\nfor (const panel of settings) {\n    for (const group of panel.groups) {\n        for (const setting of group.settings) {\n            defaults[setting.id as keyof typeof defaults] = setting.value;\n        }\n    }\n}\n\nif (dev) {\n    // eslint-disable-next-line no-console\n    console.log(defaults);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst config = $state(Object.assign({}, defaults)) as Record<keyof DefaultConfig, any>;\n\n\nexport function keyToConfig(key: string) {\n    return key.replaceAll(/([A-Z])/g, \"-$1\").toLowerCase();\n}\n\nexport function diff() {\n    // TODO: more elegance\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const output: Partial<Record<keyof typeof defaults|string, any>> = {};\n\n    for (const k in config) {\n        const key = k as keyof DefaultConfig;\n        if (Array.isArray(config[key]) && key === \"keybind\") {\n            const toAdd = config[key].filter(c => !defaults[key].includes(c));\n            if (toAdd.length) output[keyToConfig(key)] = toAdd;\n        }\n        else if (Array.isArray(config[key]) && key === \"palette\") {\n            const toAdd = [];\n            for (let p = 0; p < defaults[key].length; p++) {\n                if (config[key][p] === defaults[key][p]) continue;\n                toAdd.push(`${p}=${config[key][p]}`);\n            }\n            // const toAdd = config[key].filter(c => !defaults[key].includes(c));\n            if (toAdd.length) output[keyToConfig(key)] = toAdd;\n        }\n        else if (config[key] != defaults[key]) {\n            output[keyToConfig(key)] = config[key];\n        }\n    }\n\n    return output;\n}\n\nexport function load(conf: Partial<typeof config>) {\n    for (const key in conf) {\n        if (!(key in config)) continue;\n        if (key !== \"keybind\" && key !== \"palette\") {\n            config[key as keyof typeof config] = conf[key as keyof typeof config];\n        }\n        else if (key === \"keybind\") {\n            config.keybind = [...config.keybind, ...conf.keybind];\n        }\n        else if (key === \"palette\") {\n            for (let p = 0; p < conf.palette.length; p++) {\n                if (!conf.palette[p]) continue;\n                config.palette[p] = conf.palette[p];\n            }\n        }\n    }\n}\n\nexport default config;\n\n\n// TODO: is this useful?\ninterface DefaultConfig {\n    palette: HexColor[];\n    keybind: KeybindString[];\n    fontFamily: string;\n    fontFamilyBold: string;\n    fontFamilyItalic: string;\n    fontFamilyBoldItalic: string;\n    fontStyle: string;\n    fontStyleBold: string;\n    fontStyleItalic: string;\n    fontStyleBoldItalic: string;\n    fontFeature: string;\n    fontSize: number;\n    fontVariation: string;\n    fontVariationBold: string;\n    fontVariationItalic: string;\n    fontVariationBoldItalic: string;\n    fontCodepointMap: string;\n    fontThicken: boolean;\n    adjustCellWidth: string;\n    adjustCellHeight: string;\n    adjustFontBaseline: string;\n    adjustUnderlinePosition: string;\n    adjustUnderlineThickness: string;\n    adjustStrikethroughPosition: string;\n    adjustStrikethroughThickness: string;\n    adjustCursorThickness: string;\n    graphemeWidthMethod: string;\n    theme: string;\n    background: HexColor;\n    foreground: HexColor;\n    selectionForeground: string;\n    selectionBackground: string;\n    selectionInvertFgBg: boolean;\n    minimumContrast: number;\n    cursorColor: string;\n    cursorInvertFgBg: boolean;\n    cursorOpacity: number;\n    cursorStyle: string;\n    cursorStyleBlink: string;\n    cursorText: string;\n    cursorClickToMove: boolean;\n    mouseHideWhileTyping: boolean;\n    mouseShiftCapture: boolean;\n    mouseScrollMultiplier: number;\n    backgroundOpacity: number;\n    backgroundBlurRadius: number;\n    unfocusedSplitOpacity: number;\n    unfocusedSplitFill: string;\n    command: string;\n    waitAfterCommand: boolean;\n    abnormalCommandExitRuntime: number;\n    scrollbackLimit: number;\n    linkUrl: boolean;\n    fullscreen: boolean;\n    title: string;\n    class: string;\n    workingDirectory: string;\n    windowPaddingX: number;\n    windowPaddingY: number;\n    windowPaddingBalance: boolean;\n    windowPaddingColor: string;\n    windowVsync: boolean;\n    windowInheritWorkingDirectory: boolean;\n    windowInheritFontSize: boolean;\n    windowDecoration: boolean;\n    windowTitleFontFamily: string;\n    windowTheme: string;\n    windowColorspace: string;\n    windowHeight: number;\n    windowWidth: number;\n    windowSaveState: string;\n    windowStepResize: boolean;\n    windowNewTabPosition: string;\n    resizeOverlay: string;\n    resizeOverlayPosition: string;\n    resizeOverlayDuration: string;\n    focusFollowsMouse: boolean;\n    clipboardRead: string;\n    clipboardWrite: string;\n    clipboardTrimTrailingSpaces: boolean;\n    clipboardPasteProtection: boolean;\n    clipboardPasteBracketedSafe: boolean;\n    imageStorageLimit: number;\n    copyOnSelect: boolean;\n    clickRepeatInterval: number;\n    configFile: string;\n    configDefaultFiles: boolean;\n    confirmCloseSurface: boolean;\n    quitAfterLastWindowClosed: boolean;\n    quitAfterLastWindowClosedDelay: string;\n    initialWindow: boolean;\n    shellIntegration: string;\n    shellIntegrationFeatures: string;\n    oscColorReportFormat: string;\n    vtKamAllowed: boolean;\n    customShader: string;\n    customShaderAnimation: boolean;\n    macosNonNativeFullscreen: boolean;\n    macosTitlebarStyle: string;\n    macosOptionAsAlt: boolean;\n    macosWindowShadow: boolean;\n    linuxCgroup: string;\n    linuxCgroupMemoryLimit: string;\n    linuxCgroupProcessesLimit: string;\n    linuxCgroupHardFail: boolean;\n    gtkSingleInstance: string;\n    gtkTitlebar: boolean;\n    gtkTabsLocation: string;\n    gtkWideTabs: boolean;\n    gtkAdwaita: boolean;\n    desktopNotifications: boolean;\n    boldIsBright: boolean;\n    term: string;\n    enquiryResponse: string;\n}\n```\n\n```ts ghostty-config/src/lib/data/settings.ts\nimport config from \"$lib/stores/config.svelte\";\nimport type {HexColor} from \"$lib/utils/colors\";\n\ninterface BaseSettingType {\n    id: string;\n    name: string;\n    note?: string;\n}\n\ninterface Panel extends BaseSettingType {\n    groups: Group[];\n}\n\ninterface Group extends BaseSettingType {\n    settings: (Switch | Text | Number | Dropdown | Color | Palette | Keybinds)[];\n    // type: \"group\";\n}\n\ntype SettingType = \"switch\" | \"number\" | \"dropdown\" | \"text\" | \"color\" | \"palette\" | \"keybinds\";\n\ninterface BaseSettingItem extends BaseSettingType {\n    type: SettingType;\n    value: unknown;\n}\n\ninterface Switch extends BaseSettingItem {\n    type: \"switch\";\n    value: boolean;\n}\n\ninterface Text extends BaseSettingItem {\n    type: \"text\";\n    value: string;\n}\n\ninterface Number extends BaseSettingItem {\n    type: \"number\";\n    value: number;\n    min?: number;\n    max?: number;\n    step?: number;\n    size?: number;\n    range?: boolean;\n}\n\ninterface DropdownOption {\n    name: string;\n    value: string;\n}\n\ninterface Dropdown extends BaseSettingItem {\n    type: \"dropdown\";\n    value: \"string\";\n    options: (DropdownOption | string)[];\n}\n\ninterface Color extends BaseSettingItem {\n    value: HexColor;\n    type: \"color\";\n}\n\ninterface Palette extends BaseSettingItem {\n    value: HexColor[];\n    type: \"palette\";\n}\n\nexport type KeybindString = `${string}=${string}`;\ninterface Keybinds extends BaseSettingItem {\n    value: KeybindString[];\n    type: \"keybinds\";\n}\n\ninterface ThemeResponse {\n  \"type\": string;\n  \"encoding\": string;\n  \"size\": number;\n  \"name\": string;\n  \"path\": string;\n  \"content\": string;\n  \"sha\": string;\n  \"url\": string;\n  \"git_url\": string;\n  \"html_url\": string;\n  \"download_url\": string;\n  \"_links\": {\n    \"git\": string;\n    \"self\": string;\n    \"html\": string;\n  }\n}\n\ninterface ColorScheme {\n  palette: { [key: string]: string };\n  background?: string;\n  foreground?: string;\n  cursorColor?: string;\n  selectionBackground?: string;\n  selectionForeground?: string;\n}\n\nconst fetchThemeFiles = async () => {\n    const apiUrl = \"https://api.github.com/repos/mbadolato/iTerm2-Color-Schemes/contents/ghostty\";\n\n    const response = await fetch(apiUrl);\n\n    if (!response.ok) {\n        throw new Error(`Error fetching data: ${response.statusText}`);\n    }\n\n    const themeFiles = await response.json();\n\n    return {themeFiles};\n};\n\n// Function to convert raw string data into a JSON object\nconst parseColorScheme = (input: string): ColorScheme => {\n  const colorScheme: ColorScheme = {palette: {}};\n\n  // Split input by lines\n  const lines = input.split(\"\\n\");\n\n  lines.forEach((line) => {\n    if (line.startsWith(\"palette\")) {\n      const [, rest] = line.split(\"palette =\").map(part => part.trim());\n\n      if (rest) {\n        const [paletteIndex, color] = rest.split(\"=\");\n        if (paletteIndex && color) {\n          colorScheme.palette[paletteIndex.trim()] = color.trim();\n        }\n      }\n    }\n    else {\n      const [key, value] = line.split(\"=\").map(part => part.trim());\n\n      switch (key) {\n        case \"background\":\n          colorScheme.background = `#${value}`;\n          break;\n        case \"foreground\":\n          colorScheme.foreground = `#${value}`;\n          break;\n        case \"cursor-color\":\n          colorScheme.cursorColor = `#${value}`;\n          break;\n        case \"selection-background\":\n          colorScheme.selectionBackground = `#${value}`;\n          break;\n        case \"selection-foreground\":\n          colorScheme.selectionForeground = `#${value}`;\n          break;\n        default:\n          break;\n      }\n    }\n  });\n\n  return colorScheme;\n};\n\nconst fetchColorScheme = async (theme: string) => {\n    const apiUrl = `https://api.github.com/repos/mbadolato/iTerm2-Color-Schemes/contents/ghostty${theme ? \"/\" + theme : \"\"}`;\n\n    const response = await fetch(apiUrl,{\n        headers: {\n            Accept: \"application/vnd.github.raw+json\"\n        }\n    });\n\n    if (!response.ok) {\n        throw new Error(`Error fetching data: ${response.statusText}`);\n    }\n\n    const colorSchemeResponse = await response.text();\n\n    return {colorSchemeResponse};\n};\n\nconst {themeFiles} = await fetchThemeFiles();\nconst themeFileNames = themeFiles && themeFiles.map((file: ThemeResponse) => file.name);\n\nconst {colorSchemeResponse} = await fetchColorScheme(config ? config.theme : \"\");\nconst colorScheme = parseColorScheme(colorSchemeResponse);\n\nexport default [\n    {\n        id: \"application\",\n        name: \"Application\",\n        note: \"\",\n        groups: [\n            {\n                id: \"general\",\n                name: \"\",\n                // type: \"group\",\n                settings: [\n                    {id: \"title\", name: \"Static title for all windows\", type: \"text\", value: \"\"},\n                    {id: \"desktopNotifications\", name: \"Allow desktop notifications\", type: \"switch\", value: true},\n                    {id: \"configFile\", name: \"Additional config file\", type: \"text\", value: \"\"},\n                    {id: \"configDefaultFiles\", name: \"Load default config file\", type: \"switch\", value: true},\n                    {id: \"linkUrl\", name: \"Automatically link URLs\", note: \"Matching occurs while holding the control (Linux) or command (macOS) key.\", type: \"switch\", value: true},\n                ]\n            },\n            {\n                id: \"startup\",\n                name: \"Startup\",\n                // type: \"group\",\n                settings: [\n                    {id: \"command\", name: \"Command to run on launch\", type: \"text\", value: \"\"},\n                    {id: \"fullscreen\", name: \"Launch in fullscreen mode\", type: \"switch\", value: false},\n                    {id: \"initialWindow\", name: \"Show a window on startup\", type: \"switch\", value: true},\n                    {id: \"workingDirectory\", name: \"Directory to use after startup\", note: \"Special values of `home` and `inherit` are also allowed here.\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"shutdown\",\n                name: \"Shutdown\",\n                // type: \"group\",\n                settings: [\n                    {id: \"waitAfterCommand\", name: \"Wait for input after command\", type: \"switch\", value: false},\n                    {id: \"abnormalCommandExitRuntime\", name: \"Abnormal command exit runtime\", type: \"number\", value: 250, min: 0, size: 5},\n                    {id: \"confirmCloseSurface\", name: \"Confirm when closing a surface\", type: \"switch\", value: true},\n                    {id: \"quitAfterLastWindowClosed\", name: \"Quit after closing last window\", type: \"switch\", value: false},\n                    {id: \"quitAfterLastWindowClosedDelay\", name: \"Delay before auto quitting\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"shell\",\n                name: \"Shell Integration\",\n                // type: \"group\",\n                settings: [\n                    {id: \"shellIntegration\", name: \"Shell integration style\", type: \"dropdown\", value: \"detect\", options: [\"none\", \"detect\", \"bash\", \"elvish\", \"fish\", \"zsh\"]},\n                    {id: \"shellIntegrationFeatures\", name: \"Shell integration features\", note: \"The current available features are cursor, sudo, and title. Including one force enables it, prefixing it with `no-` force disables it, omitting it falls back to default.\", type: \"text\", value: \"cursor,no-sudo,title\"},\n                    {id: \"term\", name: \"TERM environment variable\", type: \"text\", value: \"xterm-ghostty\"},\n                ]\n            },\n            {\n                id: \"advanced\",\n                name: \"Advanced\",\n                note: \"You should only touch these settings if you know what you're doing, otherwise you could cause major issues with Ghostty!\",\n                // type: \"group\",\n                settings: [\n                    {id: \"scrollbackLimit\", name: \"Scrollback buffer size (bytes)\", note: \"This buffer exists completely in memory but is allocated lazily.\", type: \"number\", value: 10000000, min: 0, size: 10},\n                    {id: \"customShader\", name: \"Custom shader\", note: \"This matches the API of Shadertoy.\", type: \"text\", value: \"\"},\n                    {id: \"customShaderAnimation\", name: \"Allow shaders to animate\", type: \"dropdown\", value: \"false\", options: [\"false\", \"true\", \"always\"]},\n                    {id: \"enquiryResponse\", name: \"Reponse to ENQ\", type: \"text\", value: \"\"},\n                    {id: \"oscColorReportFormat\", name: \"OSC color report format\", type: \"dropdown\", value: \"16-bit\", options: [\"none\", \"8-bit\", \"16-bit\"]},\n                    {id: \"vtKamAllowed\", name: \"VT kam mode allowed\", note: \"If you don't know what this is, don't touch it!\", type: \"switch\", value: false},\n                ]\n            },\n        ]\n    },\n    {\n        id: \"clipboard\",\n        name: \"Clipboard\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"clipboardRead\", name: \"Allow terminal to read clipboard\", type: \"dropdown\", value: \"ask\", options: [\"ask\", \"allow\", \"deny\"]},\n                    {id: \"clipboardWrite\", name: \"Allow terminal to write clipboard\", type: \"dropdown\", value: \"ask\", options: [\"ask\", \"allow\", \"deny\"]},\n                    {id: \"copyOnSelect\", name: \"Copy on select\", type: \"switch\", value: true},\n                    {id: \"clipboardTrimTrailingSpaces\", name: \"Trim trailing space on copy\", type: \"switch\", value: true},\n                    {id: \"clipboardPasteProtection\", name: \"Confirm when pasting unsafely\", type: \"switch\", value: true},\n                    {id: \"clipboardPasteBracketedSafe\", name: \"Mark bracketed paste as safe\", type: \"switch\", value: true},\n                    {id: \"imageStorageLimit\", name: \"Image buffer limit (bytes)\", type: \"number\", value: 320000000, min: 0, max: 4294967295, size: 12},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"window\",\n        name: \"Window\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"windowVsync\", name: \"Enable vsync\", type: \"switch\", value: true},\n                    {id: \"windowInheritWorkingDirectory\", name: \"Inherit working directory\", type: \"switch\", value: true},\n                    {id: \"windowInheritFontSize\", name: \"Inherit font size\", type: \"switch\", value: true},\n                    {id: \"windowColorspace\", name: \"Window colorspace\", type: \"dropdown\", value: \"srgb\", options: [\"srgb\", \"display-p3\"]},\n                    {id: \"windowSaveState\", name: \"Save window state\", type: \"dropdown\", value: \"default\", options: [\"default\", \"never\", \"always\"]},\n                    // maybe move to application?\n                    {id: \"windowNewTabPosition\", name: \"New tab position\", type: \"dropdown\", value: \"current\", options: [\"current\", \"end\"]},\n                ]\n            },\n            {\n                id: \"appearance\",\n                name: \"Appearance\",\n                settings: [\n                    {id: \"windowTheme\", name: \"Window theme\", type: \"dropdown\", value: \"auto\", options: [\"auto\", \"system\", \"light\", \"dark\"]},\n                    {id: \"windowDecoration\", name: \"Enable native frames\", type: \"switch\", value: true},\n                    {id: \"windowPaddingX\", name: \"Horizontal window padding\", type: \"text\", value: \"2\"},\n                    {id: \"windowPaddingY\", name: \"Vertical window padding\", type: \"text\", value: \"2\"},\n                    {id: \"windowPaddingBalance\", name: \"Auto-balance window padding\", type: \"switch\", value: false},\n                    {id: \"windowPaddingColor\", name: \"Window padding color\", type: \"dropdown\", value: \"extend\", options: [\"background\", \"extend\", \"extend-always\"]},\n\n                    // maybe move to colors\n                    {id: \"backgroundOpacity\", name: \"Background opacity\", type: \"number\", range: true, value: 1, min: 0, max: 1, step: 0.01},\n                    {id: \"backgroundBlurRadius\", name: \"Background blur radius\", note: \"A value of 20 is reasonable for a good looking blur, going beyond that can cause rendering and performance issues.\", type: \"number\", range: true, value: 0, min: 0, max: 50, step: 1},\n                    {id: \"unfocusedSplitOpacity\", name: \"Unfocused split opacity\", type: \"number\", range: true, value: 0.7, min: 0.15, max: 1, step: 0.01},\n                    {id: \"unfocusedSplitFill\", name: \"Unfocused split fill color\", type: \"color\", value: \"\"},\n                ]\n            },\n            {\n                id: \"resize\",\n                name: \"Sizing & Resizing\",\n                settings: [\n                    {id: \"windowHeight\", name: \"Initial window height\", note: \"This size is not in pixels but in number of terminal grid cells\", type: \"number\", value: 0, min: 4, step: 1, size: 4},\n                    {id: \"windowWidth\", name: \"Initial window width\", note: \"This size is not in pixels but in number of terminal grid cells\", type: \"number\", value: 0, min: 10, step: 1, size: 4},\n                    {id: \"windowStepResize\", name: \"Resize in grid cell increments\", type: \"switch\", value: false},\n                    {id: \"resizeOverlay\", name: \"Show resize overlays\", type: \"dropdown\", value: \"after-first\", options: [\"always\", \"never\", \"after-first\"]},\n                    {id: \"resizeOverlayPosition\", name: \"Resize overlay position\", type: \"dropdown\", value: \"center\", options: [\"center\", \"top-left\", \"top-center\", \"top-right\", \"bottom-left\", \"bottom-center\", \"bottom-right\"]},\n                    {id: \"resizeOverlayDuration\", name: \"Show resize overlay time\", type: \"text\", value: \"750ms\"},\n                ]\n            },\n        ]\n    },\n    {\n        id: \"colors\",\n        name: \"Colors\",\n        groups: [\n            {\n                id: \"general\",\n                name: \"\",\n                settings: [\n                    {\n                        id: \"theme\",\n                        name: \"Color theme\",\n                        note: \"Any colors selected after setting this will overwrite the theme's colors.\",\n                        type: \"dropdown\",\n                        value: \"\",\n                        options: [\"\", ...themeFileNames]\n                    },\n                    {id: \"boldIsBright\", name: \"Bold text uses bright colors\", type: \"switch\", value: false},\n                    {id: \"minimumContrast\", name: \"Minimum contrast\", type: \"number\", value: 1, range: true, min: 1, max: 21, step: 0.1},\n                ]\n            },\n            {\n                id: \"base\",\n                name: \"Base Colors\",\n                note: \"The preview here shows selected text in the second line of the command output.\",\n                settings: [\n                    {id: \"background\", name: \"Background color\", type: \"color\", value: \"#282c34\"},\n                    {id: \"foreground\", name: \"Foreground color\", type: \"color\", value: \"#ffffff\"},\n                    {id: \"selectionBackground\", name: \"Selection background color\", type: \"color\", value: \"\"},\n                    {id: \"selectionForeground\", name: \"Selection foreground color\", type: \"color\", value: \"\"},\n                    {id: \"selectionInvertFgBg\", name: \"Invert selection colors\", note: \"Enabling this will cause selections to be the inverse of their current colors. This ignores the two selection colors above.\", type: \"switch\", value: false},\n                ]\n            },\n            {\n                id: \"cursor\",\n                name: \"Cursor\",\n                note: \"The cursor in this preview blinks on and off at 1 second intervals for emphasis, it may not match what you see in Ghostty!\",\n                settings: [\n                    {id: \"cursorColor\", name: \"Cursor color\", type: \"color\", value: \"\"},\n                    {id: \"cursorText\", name: \"Text color under cursor\", type: \"color\", value: \"\"},\n                    {id: \"cursorInvertFgBg\", name: \"Invert selection colors\", note: \"Enabling this will cause cells under the cursor to be the inverse of their current colors. This ignores the two selection colors above.\", type: \"switch\", value: false},\n                    {id: \"cursorOpacity\", name: \"Cursor opacity\", type: \"number\", value: 1, range: true, min: 0, max: 1, step: 0.05},\n                    {id: \"cursorStyle\", name: \"Cursor style\", type: \"dropdown\", value: \"block\", options: [\"block\", \"bar\", \"underline\", {value: \"block_hollow\", name: \"hollow block\"}]},\n                    {id: \"cursorStyleBlink\", name: \"Cursor blink style\", note: \"The `default` option defers to DEC mode 12 to determine blinking state.\", type: \"dropdown\", value: \"\", options: [\"true\", \"false\", {value: \"\", name: \"default\"}]},\n                ]\n            },\n            {\n                id: \"palette\",\n                name: \"Color Palette\",\n                note: \"The first 16 colors are the most commonly displayed colors in the terminal.\\n\\nColors 1-8 are typically black, red, green, yellow, blue, magenta, cyan, and white.\\nColors 9-16 are typically \\\"brighter\\\" variants of these colors.\",\n                settings: [\n                    {id: \"palette\", name: \"\", type: \"palette\", value: [\"#1d1f21\",\"#cc6666\",\"#b5bd68\",\"#f0c674\",\"#81a2be\",\"#b294bb\",\"#8abeb7\",\"#c5c8c6\",\"#666666\",\"#d54e53\",\"#b9ca4a\",\"#e7c547\",\"#7aa6da\",\"#c397d8\",\"#70c0b1\",\"#eaeaea\",\"#000000\",\"#00005f\",\"#000087\",\"#0000af\",\"#0000d7\",\"#0000ff\",\"#005f00\",\"#005f5f\",\"#005f87\",\"#005faf\",\"#005fd7\",\"#005fff\",\"#008700\",\"#00875f\",\"#008787\",\"#0087af\",\"#0087d7\",\"#0087ff\",\"#00af00\",\"#00af5f\",\"#00af87\",\"#00afaf\",\"#00afd7\",\"#00afff\",\"#00d700\",\"#00d75f\",\"#00d787\",\"#00d7af\",\"#00d7d7\",\"#00d7ff\",\"#00ff00\",\"#00ff5f\",\"#00ff87\",\"#00ffaf\",\"#00ffd7\",\"#00ffff\",\"#5f0000\",\"#5f005f\",\"#5f0087\",\"#5f00af\",\"#5f00d7\",\"#5f00ff\",\"#5f5f00\",\"#5f5f5f\",\"#5f5f87\",\"#5f5faf\",\"#5f5fd7\",\"#5f5fff\",\"#5f8700\",\"#5f875f\",\"#5f8787\",\"#5f87af\",\"#5f87d7\",\"#5f87ff\",\"#5faf00\",\"#5faf5f\",\"#5faf87\",\"#5fafaf\",\"#5fafd7\",\"#5fafff\",\"#5fd700\",\"#5fd75f\",\"#5fd787\",\"#5fd7af\",\"#5fd7d7\",\"#5fd7ff\",\"#5fff00\",\"#5fff5f\",\"#5fff87\",\"#5fffaf\",\"#5fffd7\",\"#5fffff\",\"#870000\",\"#87005f\",\"#870087\",\"#8700af\",\"#8700d7\",\"#8700ff\",\"#875f00\",\"#875f5f\",\"#875f87\",\"#875faf\",\"#875fd7\",\"#875fff\",\"#878700\",\"#87875f\",\"#878787\",\"#8787af\",\"#8787d7\",\"#8787ff\",\"#87af00\",\"#87af5f\",\"#87af87\",\"#87afaf\",\"#87afd7\",\"#87afff\",\"#87d700\",\"#87d75f\",\"#87d787\",\"#87d7af\",\"#87d7d7\",\"#87d7ff\",\"#87ff00\",\"#87ff5f\",\"#87ff87\",\"#87ffaf\",\"#87ffd7\",\"#87ffff\",\"#af0000\",\"#af005f\",\"#af0087\",\"#af00af\",\"#af00d7\",\"#af00ff\",\"#af5f00\",\"#af5f5f\",\"#af5f87\",\"#af5faf\",\"#af5fd7\",\"#af5fff\",\"#af8700\",\"#af875f\",\"#af8787\",\"#af87af\",\"#af87d7\",\"#af87ff\",\"#afaf00\",\"#afaf5f\",\"#afaf87\",\"#afafaf\",\"#afafd7\",\"#afafff\",\"#afd700\",\"#afd75f\",\"#afd787\",\"#afd7af\",\"#afd7d7\",\"#afd7ff\",\"#afff00\",\"#afff5f\",\"#afff87\",\"#afffaf\",\"#afffd7\",\"#afffff\",\"#d70000\",\"#d7005f\",\"#d70087\",\"#d700af\",\"#d700d7\",\"#d700ff\",\"#d75f00\",\"#d75f5f\",\"#d75f87\",\"#d75faf\",\"#d75fd7\",\"#d75fff\",\"#d78700\",\"#d7875f\",\"#d78787\",\"#d787af\",\"#d787d7\",\"#d787ff\",\"#d7af00\",\"#d7af5f\",\"#d7af87\",\"#d7afaf\",\"#d7afd7\",\"#d7afff\",\"#d7d700\",\"#d7d75f\",\"#d7d787\",\"#d7d7af\",\"#d7d7d7\",\"#d7d7ff\",\"#d7ff00\",\"#d7ff5f\",\"#d7ff87\",\"#d7ffaf\",\"#d7ffd7\",\"#d7ffff\",\"#ff0000\",\"#ff005f\",\"#ff0087\",\"#ff00af\",\"#ff00d7\",\"#ff00ff\",\"#ff5f00\",\"#ff5f5f\",\"#ff5f87\",\"#ff5faf\",\"#ff5fd7\",\"#ff5fff\",\"#ff8700\",\"#ff875f\",\"#ff8787\",\"#ff87af\",\"#ff87d7\",\"#ff87ff\",\"#ffaf00\",\"#ffaf5f\",\"#ffaf87\",\"#ffafaf\",\"#ffafd7\",\"#ffafff\",\"#ffd700\",\"#ffd75f\",\"#ffd787\",\"#ffd7af\",\"#ffd7d7\",\"#ffd7ff\",\"#ffff00\",\"#ffff5f\",\"#ffff87\",\"#ffffaf\",\"#ffffd7\",\"#ffffff\",\"#080808\",\"#121212\",\"#1c1c1c\",\"#262626\",\"#303030\",\"#3a3a3a\",\"#444444\",\"#4e4e4e\",\"#585858\",\"#626262\",\"#6c6c6c\",\"#767676\",\"#808080\",\"#8a8a8a\",\"#949494\",\"#9e9e9e\",\"#a8a8a8\",\"#b2b2b2\",\"#bcbcbc\",\"#c6c6c6\",\"#d0d0d0\",\"#dadada\",\"#e4e4e4\",\"#eeeeee\"]},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"fonts\",\n        name: \"Fonts\",\n        groups: [\n            {\n                id: \"general\",\n                name: \"General Font Settings\",\n                settings: [\n                    {id: \"fontSize\", name: \"Base font size\", type: \"number\", value: 13, min: 4, max: 60, step: 0.5, range: true},\n                    {id: \"fontThicken\", name: \"Thicken fonts\", type: \"switch\", note: \"This currently only affects macOS.\", value: false},\n                    {id: \"fontFeature\", name: \"Font ligature settings\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"family\",\n                name: \"Font Families\",\n                settings: [\n                    {id: \"fontFamily\", name: \"Main font family\", type: \"text\", value: \"\"},\n                    {id: \"fontFamilyBold\", name: \"Font family for bold text\", type: \"text\", value: \"\"},\n                    {id: \"fontFamilyItalic\", name: \"Font family for italic text\", type: \"text\", value: \"\"},\n                    {id: \"fontFamilyBoldItalic\", name: \"Font family for bold italic text\", type: \"text\", value: \"\"},\n                    {id: \"windowTitleFontFamily\", name: \"Window title font family\", note: \"This is currently only supported on macOS\", type: \"text\", value: \"\"},\n                    {id: \"fontCodepointMap\", name: \"Unicode-specifc font mapping\", note: \"\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"styles\",\n                name: \"Font Styles\",\n                note: \"Named font styles for the fields above. For example for `Ioveska Heavy` you would use a style of `Heavy`. Alternately you can set the style to `false` to completely disable the style and revert to default style.\",\n                settings: [\n                    {id: \"fontStyle\", name: \"Main font style\", type: \"text\", value: \"default\"},\n                    {id: \"fontStyleBold\", name: \"Font style for bold text\", type: \"text\", value: \"default\"},\n                    {id: \"fontStyleItalic\", name: \"Font style for italic text\", type: \"text\", value: \"default\"},\n                    {id: \"fontStyleBoldItalic\", name: \"Font style for bold italic text\", type: \"text\", value: \"default\"},\n                ]\n            },\n            {\n                id: \"variations\",\n                name: \"Font Variations\",\n                note: \"Variable font specific settings, please only touch this if you know what you're doing!\",\n                settings: [\n                    {id: \"fontVariation\", name: \"Main font variant\", type: \"text\", value: \"\"},\n                    {id: \"fontVariationBold\", name: \"Font variant for bold text\", type: \"text\", value: \"\"},\n                    {id: \"fontVariationItalic\", name: \"Font variant for italic text\", type: \"text\", value: \"\"},\n                    {id: \"fontVariationBoldItalic\", name: \"Font variant for bold italic text\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"advanced\",\n                name: \"Advanced Font & Cell Settings\",\n                note: \"The settings below have very little validation in Ghostty and can cause your terminal to become unusable. Be careful messing with any of these.\",\n                settings: [\n                    {id: \"adjustCellWidth\", name: \"Cell width adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustCellHeight\", name: \"Cell height adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustFontBaseline\", name: \"Font baseline adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustUnderlinePosition\", name: \"Underline position adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustUnderlineThickness\", name: \"Underline thickness adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustStrikethroughPosition\", name: \"Strikethrough position adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustStrikethroughThickness\", name: \"Strikethrough thickness adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustCursorThickness\", name: \"Cursor thickness adjustment\", type: \"text\", value: \"\"},\n                    {id: \"graphemeWidthMethod\", name: \"Grapheme width calculation method\", type: \"dropdown\", value: \"unicode\", options: [\"unicode\", \"legacy\"]},\n                ]\n            },\n\n        ]\n    },\n    {\n        id: \"keybinds\",\n        name: \"Keybinds\",\n        groups: [\n            {\n                id: \"keybinds\",\n                name: \"\",\n                settings: [\n                    {id: \"keybind\", name: \"\", type: \"keybinds\", value: [\"super+page_up=scroll_page_up\", \"super+physical:four=goto_tab:4\", \"super+shift+down=jump_to_prompt:1\", \"super+shift+w=close_window\", \"super+shift+left_bracket=previous_tab\", \"super+alt+i=inspector:toggle\", \"super+w=close_surface\", \"super+physical:eight=goto_tab:8\", \"super+alt+right=goto_split:right\", \"shift+up=adjust_selection:up\", \"super+enter=toggle_fullscreen\", \"super+t=new_tab\", \"super+c=copy_to_clipboard\", \"super+shift+right_bracket=next_tab\", \"super+physical:one=goto_tab:1\", \"shift+left=adjust_selection:left\", \"super+equal=increase_font_size:1\", \"shift+page_up=adjust_selection:page_up\", \"super+physical:three=goto_tab:3\", \"super+d=new_split:right\", \"super+ctrl+down=resize_split:down,10\", \"shift+end=adjust_selection:end\", \"super+plus=increase_font_size:1\", \"super+q=quit\", \"super+home=scroll_to_top\", \"super+ctrl+left=resize_split:left,10\", \"super+ctrl+up=resize_split:up,10\", \"super+shift+up=jump_to_prompt:-1\", \"shift+right=adjust_selection:right\", \"super+comma=open_config\", \"super+shift+comma=reload_config\", \"super+minus=decrease_font_size:1\", \"shift+page_down=adjust_selection:page_down\", \"super+a=select_all\", \"alt+shift+equal=equalize_splits\", \"super+shift+enter=toggle_split_zoom\", \"super+alt+down=goto_split:bottom\", \"super+ctrl+f=toggle_fullscreen\", \"super+ctrl+right=resize_split:right,10\", \"super+alt+shift+j=write_scrollback_file:open\", \"shift+down=adjust_selection:down\", \"super+n=new_window\", \"super+alt+left=goto_split:left\", \"super+page_down=scroll_page_down\", \"super+alt+shift+w=close_all_windows\", \"super+alt+up=goto_split:top\", \"super+left_bracket=goto_split:previous\", \"super+physical:nine=goto_tab:9\", \"super+right_bracket=goto_split:next\", \"super+end=scroll_to_bottom\", \"super+shift+j=write_scrollback_file:paste\", \"super+shift+d=new_split:down\", \"super+zero=reset_font_size\", \"super+physical:five=goto_tab:5\", \"shift+home=adjust_selection:home\", \"super+physical:seven=goto_tab:7\", \"super+k=clear_screen\", \"super+physical:two=goto_tab:2\", \"super+physical:six=goto_tab:6\", \"super+v=paste_from_clipboard\"]}\n                ]\n            }\n        ]\n    },\n    {\n        id: \"mouse\",\n        name: \"Mouse\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"cursorClickToMove\", name: \"Enable click to move cursor\", type: \"switch\", value: true},\n                    {id: \"mouseHideWhileTyping\", name: \"Hide mouse while typing\", type: \"switch\", value: false},\n                    {id: \"mouseShiftCapture\", name: \"Allow shift with mouse click\", type: \"dropdown\", value: \"false\", options: [\"true\", \"false\", \"always\", \"never\"]},\n                    // Technically the values should be min: 0.01, max: 10000, step: 0.01 but those are insane so instead I'll use sane defaults\n                    {id: \"mouseScrollMultiplier\", name: \"Mouse scroll multiplier\", type: \"number\", range: true, value: 1, min: 0.1, max: 10, step: 0.1},\n                    {id: \"focusFollowsMouse\", name: \"Focus splits on mouse move\", type: \"switch\", value: false},\n                    {id: \"clickRepeatInterval\", name: \"Milliseconds between multi-click\", note: \"A value of 0 means to use the operating system's default timing.\", type: \"number\", value: 0, min: 0, size: 4},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"gtk\",\n        name: \"GTK\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"class\", name: \"WM_CLASS class field\", note: \"This defaults to `com.mitchellh.ghostty`\", type: \"text\", value: \"\"},\n                    {id: \"x11InstanceName\", name: \"WM_CLASS instance name\", note: \"This defaults to `ghostty`\", type: \"text\", value: \"\"},\n                    {id: \"gtkSingleInstance\", name: \"Single-instance mode\", type: \"dropdown\", value: \"desktop\", options: [{name: \"detect\", value: \"desktop\"}, \"true\", \"false\"]},\n                    {id: \"gtkTitlebar\", name: \"Show titlebar\", type: \"switch\", value: true},\n                    {id: \"gtkTabsLocation\", name: \"Tab location\", type: \"dropdown\", value: \"top\", options: [\"top\", \"right\", \"bottom\", \"left\"]},\n                    {id: \"gtkWideTabs\", name: \"Use wide tabs\", type: \"switch\", value: true},\n                    {id: \"gtkAdwaita\", name: \"Enable adwaita theme support\", type: \"switch\", value: true},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"linux\",\n        name: \"Linux\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"linuxCgroup\", name: \"Use dedicated cgroups\", type: \"dropdown\", value: \"single-instance\", options: [\"single-instance\", \"always\", \"never\"]},\n                    {id: \"linuxCgroupMemoryLimit\", name: \"Memory limit (bytes)\", type: \"number\", min: 0, max: 4294967295, size: 12},\n                    {id: \"linuxCgroupProcessLimit\", name: \"Max number of processes\", type: \"number\", min: 0, size: 5},\n                    {id: \"linuxCgroupHardFail\", name: \"Hard fail on startup\", type: \"switch\", value: false},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"macos\",\n        name: \"macOS\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"macosNonNativeFullscreen\", name: \"Use non-native fullscreen\", note: \"Tabs currently do not work with non-native fullscreen windows\", type: \"dropdown\", value: \"false\", options: [\"visible-menu\", \"true\", \"false\"]},\n                    {id: \"macosTitlebarStyle\", name: \"Titlebar style\", type: \"dropdown\", value: \"transparent\", options: [\"transparent\", \"native\", \"tabs\"]},\n                    {id: \"macosOptionAsAlt\", name: \"Use option key as alt key\", type: \"dropdown\", value: \"false\", options: [\"true\", \"false\", \"left\", \"right\"]},\n                    {id: \"macosWindowShadow\", name: \"Show the window shadow\", type: \"switch\", value: true},\n                ]\n            }\n        ]\n    },\n] as Panel[];\n```\n```typescript\n\nconst {colorSchemeResponse} = await fetchColorScheme(config ? config.theme : \"\");\nconst colorScheme = parseColorScheme(colorSchemeResponse);\n// error: 'colorScheme' is assigned a value but never used. Allowed unused vars must match /^_/u.\n\nexport default [\n```\n\n\n\nTo apply the selected theme colors to the base colors, cursor colors, and color palette, you can modify the `config` store when the theme dropdown value changes. Here's how you can do it:\n\n1. First, create a reactive statement that watches for changes in the theme dropdown:\n\n```typescript\n$: {\n  if (config.theme) {\n    applyTheme(config.theme);\n  }\n}\n```\n\n2. Implement the `applyTheme` function:\n\n```typescript\nasync function applyTheme(themeName: string) {\n  const {colorSchemeResponse} = await fetchColorScheme(themeName);\n  const colorScheme = parseColorScheme(colorSchemeResponse);\n\n  // Apply base colors\n  if (colorScheme.background) config.background = colorScheme.background;\n  if (colorScheme.foreground) config.foreground = colorScheme.foreground;\n  if (colorScheme.selectionBackground) config.selectionBackground = colorScheme.selectionBackground;\n  if (colorScheme.selectionForeground) config.selectionForeground = colorScheme.selectionForeground;\n\n  // Apply cursor colors\n  if (colorScheme.cursorColor) config.cursorColor = colorScheme.cursorColor;\n\n  // Apply color palette\n  if (colorScheme.palette) {\n    const newPalette = Array(256).fill('#000000');\n    for (const [index, color] of Object.entries(colorScheme.palette)) {\n      newPalette[parseInt(index)] = color;\n    }\n    config.palette = newPalette;\n  }\n}\n```\n\n3. Update the `config` store to include these new properties:\n\n```typescript\nconst config = $state({\n  // ... existing properties\n  theme: '',\n  background: '#282c34',\n  foreground: '#ffffff',\n  selectionBackground: '',\n  selectionForeground: '',\n  cursorColor: '',\n  palette: [] as string[],\n}) as Record<keyof DefaultConfig, any>;\n```\n\n4. Make sure to update the `DefaultConfig` interface to include these new properties:\n\n```typescript\ninterface DefaultConfig {\n  // ... existing properties\n  theme: string;\n  background: HexColor;\n  foreground: HexColor;\n  selectionBackground: HexColor;\n  selectionForeground: HexColor;\n  cursorColor: HexColor;\n  palette: HexColor[];\n}\n```\n\nWith these changes, when a user selects a theme from the dropdown, the `applyTheme` function will be called, fetching the theme colors and updating the `config` store with the new values. This will automatically update the base colors, cursor colors, and color palette in your application.\n\nRemember to handle any potential errors that might occur during the theme fetching and parsing process.\nWhere do these changes go?\nI apologize for the confusion. You're right to ask where these changes should go, as they don't fit neatly into the existing file structure you've shown. Here's a suggestion on how to implement this functionality:\n\n1. Create a new file called `themeHandler.ts` in the `src/lib` directory. This file will contain the theme-related logic:\n\n```typescript\n// src/lib/themeHandler.ts\n\nimport type { HexColor } from \"$lib/utils/colors\";\nimport config from \"$lib/stores/config.svelte\";\nimport { fetchColorScheme, parseColorScheme } from \"$lib/data/settings\";\n\nexport async function applyTheme(themeName: string) {\n  const { colorSchemeResponse } = await fetchColorScheme(themeName);\n  const colorScheme = parseColorScheme(colorSchemeResponse);\n\n  // Apply base colors\n  if (colorScheme.background) config.background = colorScheme.background;\n  if (colorScheme.foreground) config.foreground = colorScheme.foreground;\n  if (colorScheme.selectionBackground) config.selectionBackground = colorScheme.selectionBackground;\n  if (colorScheme.selectionForeground) config.selectionForeground = colorScheme.selectionForeground;\n\n  // Apply cursor colors\n  if (colorScheme.cursorColor) config.cursorColor = colorScheme.cursorColor;\n\n  // Apply color palette\n  if (colorScheme.palette) {\n    const newPalette = Array(256).fill('#000000');\n    for (const [index, color] of Object.entries(colorScheme.palette)) {\n      newPalette[parseInt(index)] = color as HexColor;\n    }\n    config.palette = newPalette;\n  }\n}\n```\n\n2. Modify the `config.svelte.ts` file to include the new properties and import the `applyTheme` function:\n\n```typescript\n// src/lib/stores/config.svelte.ts\n\nimport { applyTheme } from \"$lib/themeHandler\";\nimport type { HexColor } from \"$lib/utils/colors\";\n\n// ... existing imports and code\n\nconst config = $state({\n  // ... existing properties\n  theme: '',\n  background: '#282c34' as HexColor,\n  foreground: '#ffffff' as HexColor,\n  selectionBackground: '' as HexColor,\n  selectionForeground: '' as HexColor,\n  cursorColor: '' as HexColor,\n  palette: [] as HexColor[],\n}) as Record<keyof DefaultConfig, any>;\n\n// Add a reactive statement to watch for theme changes\n$: {\n  if (config.theme) {\n    applyTheme(config.theme);\n  }\n}\n\n// ... rest of the existing code\n\ninterface DefaultConfig {\n  // ... existing properties\n  theme: string;\n  background: HexColor;\n  foreground: HexColor;\n  selectionBackground: HexColor;\n  selectionForeground: HexColor;\n  cursorColor: HexColor;\n  palette: HexColor[];\n}\n\n// ... rest of the existing code\n```\n\n3. Update the `settings.ts` file to export the `fetchColorScheme` and `parseColorScheme` functions:\n\n```typescript\n// src/lib/data/settings.ts\n\n// ... existing code\n\nexport const fetchColorScheme = async (theme: string) => {\n  // ... existing implementation\n};\n\nexport const parseColorScheme = (input: string): ColorScheme => {\n  // ... existing implementation\n};\n\n// ... rest of the existing code\n```\n\nThese changes will integrate the theme handling logic into your existing structure. The `applyTheme` function will be called whenever the `theme` property in the `config` store changes, updating the colors accordingly.\n\nRemember to handle any potential errors that might occur during the theme fetching and parsing process in your UI components or error boundary.\neslint: Unexpected labeled statement\nI apologize for the confusion. The error you're encountering is due to the use of labels in reactive statements, which is a feature specific to Svelte, not TypeScript. Since we're working with a TypeScript file, we need to approach this differently. Let's modify the `config.svelte.ts` file to handle theme changes without using Svelte-specific syntax:\n\n1. Update the `config.svelte.ts` file:\n\n```typescript\n// src/lib/stores/config.svelte.ts\n\nimport { derived } from 'svelte/store';\nimport type { HexColor } from \"$lib/utils/colors\";\nimport { applyTheme } from \"$lib/themeHandler\";\n\n// ... existing imports and code\n\nconst config = {\n  // ... existing properties\n  theme: '',\n  background: '#282c34' as HexColor,\n  foreground: '#ffffff' as HexColor,\n  selectionBackground: '' as HexColor,\n  selectionForeground: '' as HexColor,\n  cursorColor: '' as HexColor,\n  palette: [] as HexColor[],\n} as Record<keyof DefaultConfig, any>;\n\n// Create a derived store to watch for theme changes\n\n\n// Subscribe to the themeWatcher to trigger theme changes\nthemeWatcher.subscribe(() => {});\n\n// ... rest of the existing code\n\ninterface DefaultConfig {\n  // ... existing properties\n  theme: string;\n  background: HexColor;\n  foreground: HexColor;\n  selectionBackground: HexColor;\n  selectionForeground: HexColor;\n  cursorColor: HexColor;\n  palette: HexColor[];\n}\n\n// ... rest of the existing code\n\nexport default config;\n```\n\n2. Update the `themeHandler.ts` file:\n\n```typescript\n// src/lib/themeHandler.ts\n\nimport type { HexColor } from \"$lib/utils/colors\";\nimport config from \"$lib/stores/config.svelte\";\nimport { fetchColorScheme, parseColorScheme } from \"$lib/data/settings\";\n\nexport async function applyTheme(themeName: string) {\n  try {\n    const { colorSchemeResponse } = await fetchColorScheme(themeName);\n    const colorScheme = parseColorScheme(colorSchemeResponse);\n\n    // Apply base colors\n    if (colorScheme.background) config.background = colorScheme.background;\n    if (colorScheme.foreground) config.foreground = colorScheme.foreground;\n    if (colorScheme.selectionBackground) config.selectionBackground = colorScheme.selectionBackground;\n    if (colorScheme.selectionForeground) config.selectionForeground = colorScheme.selectionForeground;\n\n    // Apply cursor colors\n    if (colorScheme.cursorColor) config.cursorColor = colorScheme.cursorColor;\n\n    // Apply color palette\n    if (colorScheme.palette) {\n      const newPalette = Array(256).fill('#000000');\n      for (const [index, color] of Object.entries(colorScheme.palette)) {\n        newPalette[parseInt(index)] = color as HexColor;\n      }\n      config.palette = newPalette;\n    }\n  } catch (error) {\n    console.error(\"Error applying theme:\", error);\n    // Handle the error as needed (e.g., show a notification to the user)\n  }\n}\n```\n\nThese changes accomplish the following:\n\n1. We create a derived store `themeWatcher` that watches for changes to `config.theme`.\n2. When `config.theme` changes, `applyTheme` is called with the new theme.\n3. We subscribe to `themeWatcher` to ensure it's active and responsive to changes.\n4. The `applyTheme` function now includes error handling.\n\nThis approach should work with TypeScript and avoid the ESLint error while still providing the desired functionality of applying the theme when it changes.\neslint: 'derived' is not defined.\n\n```ts ghostty-config/src/lib/stores/config.svelte.ts\nimport {dev} from \"$app/environment\";\nimport settings, {type KeybindString} from \"$lib/data/settings\";\nimport type {HexColor} from \"$lib/utils/colors\";\nimport themeHandler from \"$lib/utils/themeHandler\";\n// import defs from \"../data/defaults.json\";\n\n// TODO: find a good way to properly type the config\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaults: Partial<Record<keyof DefaultConfig, any>> = {};\n\nfor (const panel of settings) {\n    for (const group of panel.groups) {\n        for (const setting of group.settings) {\n            defaults[setting.id as keyof typeof defaults] = setting.value;\n        }\n    }\n}\n\nif (dev) {\n    // eslint-disable-next-line no-console\n    console.log(defaults);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst config = $state(Object.assign({}, defaults)) as Record<keyof DefaultConfig, any>;\n\nconst themeWatcher = derived(\n  () => config.theme,\n  (theme, set) => {\n    if (theme) {\n      themeHandler(theme).then(() => set(theme));\n    }\n  }\n);\n\nexport function keyToConfig(key: string) {\n    return key.replaceAll(/([A-Z])/g, \"-$1\").toLowerCase();\n}\n\nexport function diff() {\n    // TODO: more elegance\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const output: Partial<Record<keyof typeof defaults|string, any>> = {};\n\n    for (const k in config) {\n        const key = k as keyof DefaultConfig;\n        if (Array.isArray(config[key]) && key === \"keybind\") {\n            const toAdd = config[key].filter(c => !defaults[key].includes(c));\n            if (toAdd.length) output[keyToConfig(key)] = toAdd;\n        }\n        else if (Array.isArray(config[key]) && key === \"palette\") {\n            const toAdd = [];\n            for (let p = 0; p < defaults[key].length; p++) {\n                if (config[key][p] === defaults[key][p]) continue;\n                toAdd.push(`${p}=${config[key][p]}`);\n            }\n            // const toAdd = config[key].filter(c => !defaults[key].includes(c));\n            if (toAdd.length) output[keyToConfig(key)] = toAdd;\n        }\n        else if (config[key] != defaults[key]) {\n            output[keyToConfig(key)] = config[key];\n        }\n    }\n\n    return output;\n}\n\nexport function load(conf: Partial<typeof config>) {\n    for (const key in conf) {\n        if (!(key in config)) continue;\n        if (key !== \"keybind\" && key !== \"palette\") {\n            config[key as keyof typeof config] = conf[key as keyof typeof config];\n        }\n        else if (key === \"keybind\") {\n            config.keybind = [...config.keybind, ...conf.keybind];\n        }\n        else if (key === \"palette\") {\n            for (let p = 0; p < conf.palette.length; p++) {\n                if (!conf.palette[p]) continue;\n                config.palette[p] = conf.palette[p];\n            }\n        }\n    }\n}\n\nexport default config;\n\n\n// TODO: is this useful?\ninterface DefaultConfig {\n    palette: HexColor[];\n    keybind: KeybindString[];\n    fontFamily: string;\n    fontFamilyBold: string;\n    fontFamilyItalic: string;\n    fontFamilyBoldItalic: string;\n    fontStyle: string;\n    fontStyleBold: string;\n    fontStyleItalic: string;\n    fontStyleBoldItalic: string;\n    fontFeature: string;\n    fontSize: number;\n    fontVariation: string;\n    fontVariationBold: string;\n    fontVariationItalic: string;\n    fontVariationBoldItalic: string;\n    fontCodepointMap: string;\n    fontThicken: boolean;\n    adjustCellWidth: string;\n    adjustCellHeight: string;\n    adjustFontBaseline: string;\n    adjustUnderlinePosition: string;\n    adjustUnderlineThickness: string;\n    adjustStrikethroughPosition: string;\n    adjustStrikethroughThickness: string;\n    adjustCursorThickness: string;\n    graphemeWidthMethod: string;\n    theme: string;\n    background: HexColor;\n    foreground: HexColor;\n    selectionForeground: string;\n    selectionBackground: string;\n    selectionInvertFgBg: boolean;\n    minimumContrast: number;\n    cursorColor: string;\n    cursorInvertFgBg: boolean;\n    cursorOpacity: number;\n    cursorStyle: string;\n    cursorStyleBlink: string;\n    cursorText: string;\n    cursorClickToMove: boolean;\n    mouseHideWhileTyping: boolean;\n    mouseShiftCapture: boolean;\n    mouseScrollMultiplier: number;\n    backgroundOpacity: number;\n    backgroundBlurRadius: number;\n    unfocusedSplitOpacity: number;\n    unfocusedSplitFill: string;\n    command: string;\n    waitAfterCommand: boolean;\n    abnormalCommandExitRuntime: number;\n    scrollbackLimit: number;\n    linkUrl: boolean;\n    fullscreen: boolean;\n    title: string;\n    class: string;\n    workingDirectory: string;\n    windowPaddingX: number;\n    windowPaddingY: number;\n    windowPaddingBalance: boolean;\n    windowPaddingColor: string;\n    windowVsync: boolean;\n    windowInheritWorkingDirectory: boolean;\n    windowInheritFontSize: boolean;\n    windowDecoration: boolean;\n    windowTitleFontFamily: string;\n    windowTheme: string;\n    windowColorspace: string;\n    windowHeight: number;\n    windowWidth: number;\n    windowSaveState: string;\n    windowStepResize: boolean;\n    windowNewTabPosition: string;\n    resizeOverlay: string;\n    resizeOverlayPosition: string;\n    resizeOverlayDuration: string;\n    focusFollowsMouse: boolean;\n    clipboardRead: string;\n    clipboardWrite: string;\n    clipboardTrimTrailingSpaces: boolean;\n    clipboardPasteProtection: boolean;\n    clipboardPasteBracketedSafe: boolean;\n    imageStorageLimit: number;\n    copyOnSelect: boolean;\n    clickRepeatInterval: number;\n    configFile: string;\n    configDefaultFiles: boolean;\n    confirmCloseSurface: boolean;\n    quitAfterLastWindowClosed: boolean;\n    quitAfterLastWindowClosedDelay: string;\n    initialWindow: boolean;\n    shellIntegration: string;\n    shellIntegrationFeatures: string;\n    oscColorReportFormat: string;\n    vtKamAllowed: boolean;\n    customShader: string;\n    customShaderAnimation: boolean;\n    macosNonNativeFullscreen: boolean;\n    macosTitlebarStyle: string;\n    macosOptionAsAlt: boolean;\n    macosWindowShadow: boolean;\n    linuxCgroup: string;\n    linuxCgroupMemoryLimit: string;\n    linuxCgroupProcessesLimit: string;\n    linuxCgroupHardFail: boolean;\n    gtkSingleInstance: string;\n    gtkTitlebar: boolean;\n    gtkTabsLocation: string;\n    gtkWideTabs: boolean;\n    gtkAdwaita: boolean;\n    desktopNotifications: boolean;\n    boldIsBright: boolean;\n    term: string;\n    enquiryResponse: string;\n}\n```\n```typescript\nconst config = $state(Object.assign({}, defaults)) as Record<keyof DefaultConfig, any>;\n\nconst themeWatcher = derived(\n// error: 'themeWatcher' is assigned a value but never used. Allowed unused vars must match /^_/u.\n  () => config.theme,\n  (theme, set) => {\n```\n```typescript\nconst config = $state(Object.assign({}, defaults)) as Record<keyof DefaultConfig, any>;\n\nconst themeWatcher = derived(\n// error: Cannot find name 'derived'. Did you mean '$derived'?\n  () => config.theme,\n  (theme, set) => {\n```\n```typescript\nconst config = $state(Object.assign({}, defaults)) as Record<keyof DefaultConfig, any>;\n\nconst themeWatcher = derived(\n// error: 'derived' is not defined.\n  () => config.theme,\n  (theme, set) => {\n```\n```typescript\nconst themeWatcher = derived(\n  () => config.theme,\n  (theme, set) => {\n// error: Parameter 'theme' implicitly has an 'any' type.\n    if (theme) {\n      themeHandler(theme).then(() => set(theme));\n```\n```typescript\nconst themeWatcher = derived(\n  () => config.theme,\n  (theme, set) => {\n// error: Parameter 'set' implicitly has an 'any' type.\n    if (theme) {\n      themeHandler(theme).then(() => set(theme));\n```\n\n\n```ts ghostty-config/src/lib/data/settings.ts\nimport config from \"$lib/stores/config.svelte\";\nimport type {HexColor} from \"$lib/utils/colors\";\n\ninterface BaseSettingType {\n    id: string;\n    name: string;\n    note?: string;\n}\n\ninterface Panel extends BaseSettingType {\n    groups: Group[];\n}\n\ninterface Group extends BaseSettingType {\n    settings: (Switch | Text | Number | Dropdown | Color | Palette | Keybinds)[];\n    // type: \"group\";\n}\n\ntype SettingType = \"switch\" | \"number\" | \"dropdown\" | \"text\" | \"color\" | \"palette\" | \"keybinds\";\n\ninterface BaseSettingItem extends BaseSettingType {\n    type: SettingType;\n    value: unknown;\n}\n\ninterface Switch extends BaseSettingItem {\n    type: \"switch\";\n    value: boolean;\n}\n\ninterface Text extends BaseSettingItem {\n    type: \"text\";\n    value: string;\n}\n\ninterface Number extends BaseSettingItem {\n    type: \"number\";\n    value: number;\n    min?: number;\n    max?: number;\n    step?: number;\n    size?: number;\n    range?: boolean;\n}\n\ninterface DropdownOption {\n    name: string;\n    value: string;\n}\n\ninterface Dropdown extends BaseSettingItem {\n    type: \"dropdown\";\n    value: \"string\";\n    options: (DropdownOption | string)[];\n}\n\ninterface Color extends BaseSettingItem {\n    value: HexColor;\n    type: \"color\";\n}\n\ninterface Palette extends BaseSettingItem {\n    value: HexColor[];\n    type: \"palette\";\n}\n\nexport type KeybindString = `${string}=${string}`;\ninterface Keybinds extends BaseSettingItem {\n    value: KeybindString[];\n    type: \"keybinds\";\n}\n\ninterface ThemeResponse {\n  \"type\": string;\n  \"encoding\": string;\n  \"size\": number;\n  \"name\": string;\n  \"path\": string;\n  \"content\": string;\n  \"sha\": string;\n  \"url\": string;\n  \"git_url\": string;\n  \"html_url\": string;\n  \"download_url\": string;\n  \"_links\": {\n    \"git\": string;\n    \"self\": string;\n    \"html\": string;\n  }\n}\n\ninterface ColorScheme {\n  palette: { [key: string]: string };\n  background?: string;\n  foreground?: string;\n  cursorColor?: string;\n  selectionBackground?: string;\n  selectionForeground?: string;\n}\n\nconst fetchThemeFiles = async () => {\n    const apiUrl = \"https://api.github.com/repos/mbadolato/iTerm2-Color-Schemes/contents/ghostty\";\n\n    const response = await fetch(apiUrl);\n\n    if (!response.ok) {\n        throw new Error(`Error fetching data: ${response.statusText}`);\n    }\n\n    const themeFiles = await response.json();\n\n    return {themeFiles};\n};\n\n// Function to convert raw string data into a JSON object\nexport const parseColorScheme = (input: string): ColorScheme => {\n  const colorScheme: ColorScheme = {palette: {}};\n\n  // Split input by lines\n  const lines = input.split(\"\\n\");\n\n  lines.forEach((line) => {\n    if (line.startsWith(\"palette\")) {\n      const [, rest] = line.split(\"palette =\").map(part => part.trim());\n\n      if (rest) {\n        const [paletteIndex, color] = rest.split(\"=\");\n        if (paletteIndex && color) {\n          colorScheme.palette[paletteIndex.trim()] = color.trim();\n        }\n      }\n    }\n    else {\n      const [key, value] = line.split(\"=\").map(part => part.trim());\n\n      switch (key) {\n        case \"background\":\n          colorScheme.background = `#${value}`;\n          break;\n        case \"foreground\":\n          colorScheme.foreground = `#${value}`;\n          break;\n        case \"cursor-color\":\n          colorScheme.cursorColor = `#${value}`;\n          break;\n        case \"selection-background\":\n          colorScheme.selectionBackground = `#${value}`;\n          break;\n        case \"selection-foreground\":\n          colorScheme.selectionForeground = `#${value}`;\n          break;\n        default:\n          break;\n      }\n    }\n  });\n\n  return colorScheme;\n};\n\nexport const fetchColorScheme = async (theme: string) => {\n    const apiUrl = `https://api.github.com/repos/mbadolato/iTerm2-Color-Schemes/contents/ghostty${theme ? \"/\" + theme : \"\"}`;\n\n    const response = await fetch(apiUrl,{\n        headers: {\n            Accept: \"application/vnd.github.raw+json\"\n        }\n    });\n\n    if (!response.ok) {\n        throw new Error(`Error fetching data: ${response.statusText}`);\n    }\n\n    const colorSchemeResponse = await response.text();\n\n    return {colorSchemeResponse};\n};\n\nconst {themeFiles} = await fetchThemeFiles();\nconst themeFileNames = themeFiles && themeFiles.map((file: ThemeResponse) => file.name);\n\nconst {colorSchemeResponse} = await fetchColorScheme(config ? config.theme : \"\");\nconst colorScheme = parseColorScheme(colorSchemeResponse);\n\nexport default [\n    {\n        id: \"application\",\n        name: \"Application\",\n        note: \"\",\n        groups: [\n            {\n                id: \"general\",\n                name: \"\",\n                // type: \"group\",\n                settings: [\n                    {id: \"title\", name: \"Static title for all windows\", type: \"text\", value: \"\"},\n                    {id: \"desktopNotifications\", name: \"Allow desktop notifications\", type: \"switch\", value: true},\n                    {id: \"configFile\", name: \"Additional config file\", type: \"text\", value: \"\"},\n                    {id: \"configDefaultFiles\", name: \"Load default config file\", type: \"switch\", value: true},\n                    {id: \"linkUrl\", name: \"Automatically link URLs\", note: \"Matching occurs while holding the control (Linux) or command (macOS) key.\", type: \"switch\", value: true},\n                ]\n            },\n            {\n                id: \"startup\",\n                name: \"Startup\",\n                // type: \"group\",\n                settings: [\n                    {id: \"command\", name: \"Command to run on launch\", type: \"text\", value: \"\"},\n                    {id: \"fullscreen\", name: \"Launch in fullscreen mode\", type: \"switch\", value: false},\n                    {id: \"initialWindow\", name: \"Show a window on startup\", type: \"switch\", value: true},\n                    {id: \"workingDirectory\", name: \"Directory to use after startup\", note: \"Special values of `home` and `inherit` are also allowed here.\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"shutdown\",\n                name: \"Shutdown\",\n                // type: \"group\",\n                settings: [\n                    {id: \"waitAfterCommand\", name: \"Wait for input after command\", type: \"switch\", value: false},\n                    {id: \"abnormalCommandExitRuntime\", name: \"Abnormal command exit runtime\", type: \"number\", value: 250, min: 0, size: 5},\n                    {id: \"confirmCloseSurface\", name: \"Confirm when closing a surface\", type: \"switch\", value: true},\n                    {id: \"quitAfterLastWindowClosed\", name: \"Quit after closing last window\", type: \"switch\", value: false},\n                    {id: \"quitAfterLastWindowClosedDelay\", name: \"Delay before auto quitting\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"shell\",\n                name: \"Shell Integration\",\n                // type: \"group\",\n                settings: [\n                    {id: \"shellIntegration\", name: \"Shell integration style\", type: \"dropdown\", value: \"detect\", options: [\"none\", \"detect\", \"bash\", \"elvish\", \"fish\", \"zsh\"]},\n                    {id: \"shellIntegrationFeatures\", name: \"Shell integration features\", note: \"The current available features are cursor, sudo, and title. Including one force enables it, prefixing it with `no-` force disables it, omitting it falls back to default.\", type: \"text\", value: \"cursor,no-sudo,title\"},\n                    {id: \"term\", name: \"TERM environment variable\", type: \"text\", value: \"xterm-ghostty\"},\n                ]\n            },\n            {\n                id: \"advanced\",\n                name: \"Advanced\",\n                note: \"You should only touch these settings if you know what you're doing, otherwise you could cause major issues with Ghostty!\",\n                // type: \"group\",\n                settings: [\n                    {id: \"scrollbackLimit\", name: \"Scrollback buffer size (bytes)\", note: \"This buffer exists completely in memory but is allocated lazily.\", type: \"number\", value: 10000000, min: 0, size: 10},\n                    {id: \"customShader\", name: \"Custom shader\", note: \"This matches the API of Shadertoy.\", type: \"text\", value: \"\"},\n                    {id: \"customShaderAnimation\", name: \"Allow shaders to animate\", type: \"dropdown\", value: \"false\", options: [\"false\", \"true\", \"always\"]},\n                    {id: \"enquiryResponse\", name: \"Reponse to ENQ\", type: \"text\", value: \"\"},\n                    {id: \"oscColorReportFormat\", name: \"OSC color report format\", type: \"dropdown\", value: \"16-bit\", options: [\"none\", \"8-bit\", \"16-bit\"]},\n                    {id: \"vtKamAllowed\", name: \"VT kam mode allowed\", note: \"If you don't know what this is, don't touch it!\", type: \"switch\", value: false},\n                ]\n            },\n        ]\n    },\n    {\n        id: \"clipboard\",\n        name: \"Clipboard\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"clipboardRead\", name: \"Allow terminal to read clipboard\", type: \"dropdown\", value: \"ask\", options: [\"ask\", \"allow\", \"deny\"]},\n                    {id: \"clipboardWrite\", name: \"Allow terminal to write clipboard\", type: \"dropdown\", value: \"ask\", options: [\"ask\", \"allow\", \"deny\"]},\n                    {id: \"copyOnSelect\", name: \"Copy on select\", type: \"switch\", value: true},\n                    {id: \"clipboardTrimTrailingSpaces\", name: \"Trim trailing space on copy\", type: \"switch\", value: true},\n                    {id: \"clipboardPasteProtection\", name: \"Confirm when pasting unsafely\", type: \"switch\", value: true},\n                    {id: \"clipboardPasteBracketedSafe\", name: \"Mark bracketed paste as safe\", type: \"switch\", value: true},\n                    {id: \"imageStorageLimit\", name: \"Image buffer limit (bytes)\", type: \"number\", value: 320000000, min: 0, max: 4294967295, size: 12},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"window\",\n        name: \"Window\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"windowVsync\", name: \"Enable vsync\", type: \"switch\", value: true},\n                    {id: \"windowInheritWorkingDirectory\", name: \"Inherit working directory\", type: \"switch\", value: true},\n                    {id: \"windowInheritFontSize\", name: \"Inherit font size\", type: \"switch\", value: true},\n                    {id: \"windowColorspace\", name: \"Window colorspace\", type: \"dropdown\", value: \"srgb\", options: [\"srgb\", \"display-p3\"]},\n                    {id: \"windowSaveState\", name: \"Save window state\", type: \"dropdown\", value: \"default\", options: [\"default\", \"never\", \"always\"]},\n                    // maybe move to application?\n                    {id: \"windowNewTabPosition\", name: \"New tab position\", type: \"dropdown\", value: \"current\", options: [\"current\", \"end\"]},\n                ]\n            },\n            {\n                id: \"appearance\",\n                name: \"Appearance\",\n                settings: [\n                    {id: \"windowTheme\", name: \"Window theme\", type: \"dropdown\", value: \"auto\", options: [\"auto\", \"system\", \"light\", \"dark\"]},\n                    {id: \"windowDecoration\", name: \"Enable native frames\", type: \"switch\", value: true},\n                    {id: \"windowPaddingX\", name: \"Horizontal window padding\", type: \"text\", value: \"2\"},\n                    {id: \"windowPaddingY\", name: \"Vertical window padding\", type: \"text\", value: \"2\"},\n                    {id: \"windowPaddingBalance\", name: \"Auto-balance window padding\", type: \"switch\", value: false},\n                    {id: \"windowPaddingColor\", name: \"Window padding color\", type: \"dropdown\", value: \"extend\", options: [\"background\", \"extend\", \"extend-always\"]},\n\n                    // maybe move to colors\n                    {id: \"backgroundOpacity\", name: \"Background opacity\", type: \"number\", range: true, value: 1, min: 0, max: 1, step: 0.01},\n                    {id: \"backgroundBlurRadius\", name: \"Background blur radius\", note: \"A value of 20 is reasonable for a good looking blur, going beyond that can cause rendering and performance issues.\", type: \"number\", range: true, value: 0, min: 0, max: 50, step: 1},\n                    {id: \"unfocusedSplitOpacity\", name: \"Unfocused split opacity\", type: \"number\", range: true, value: 0.7, min: 0.15, max: 1, step: 0.01},\n                    {id: \"unfocusedSplitFill\", name: \"Unfocused split fill color\", type: \"color\", value: \"\"},\n                ]\n            },\n            {\n                id: \"resize\",\n                name: \"Sizing & Resizing\",\n                settings: [\n                    {id: \"windowHeight\", name: \"Initial window height\", note: \"This size is not in pixels but in number of terminal grid cells\", type: \"number\", value: 0, min: 4, step: 1, size: 4},\n                    {id: \"windowWidth\", name: \"Initial window width\", note: \"This size is not in pixels but in number of terminal grid cells\", type: \"number\", value: 0, min: 10, step: 1, size: 4},\n                    {id: \"windowStepResize\", name: \"Resize in grid cell increments\", type: \"switch\", value: false},\n                    {id: \"resizeOverlay\", name: \"Show resize overlays\", type: \"dropdown\", value: \"after-first\", options: [\"always\", \"never\", \"after-first\"]},\n                    {id: \"resizeOverlayPosition\", name: \"Resize overlay position\", type: \"dropdown\", value: \"center\", options: [\"center\", \"top-left\", \"top-center\", \"top-right\", \"bottom-left\", \"bottom-center\", \"bottom-right\"]},\n                    {id: \"resizeOverlayDuration\", name: \"Show resize overlay time\", type: \"text\", value: \"750ms\"},\n                ]\n            },\n        ]\n    },\n    {\n        id: \"colors\",\n        name: \"Colors\",\n        groups: [\n            {\n                id: \"general\",\n                name: \"\",\n                settings: [\n                    {\n                        id: \"theme\",\n                        name: \"Color theme\",\n                        note: \"Any colors selected after setting this will overwrite the theme's colors.\",\n                        type: \"dropdown\",\n                        value: \"\",\n                        options: [\"\", ...themeFileNames]\n                    },\n                    {id: \"boldIsBright\", name: \"Bold text uses bright colors\", type: \"switch\", value: false},\n                    {id: \"minimumContrast\", name: \"Minimum contrast\", type: \"number\", value: 1, range: true, min: 1, max: 21, step: 0.1},\n                ]\n            },\n            {\n                id: \"base\",\n                name: \"Base Colors\",\n                note: \"The preview here shows selected text in the second line of the command output.\",\n                settings: [\n                    {id: \"background\", name: \"Background color\", type: \"color\", value: \"#282c34\"},\n                    {id: \"foreground\", name: \"Foreground color\", type: \"color\", value: \"#ffffff\"},\n                    {id: \"selectionBackground\", name: \"Selection background color\", type: \"color\", value: \"\"},\n                    {id: \"selectionForeground\", name: \"Selection foreground color\", type: \"color\", value: \"\"},\n                    {id: \"selectionInvertFgBg\", name: \"Invert selection colors\", note: \"Enabling this will cause selections to be the inverse of their current colors. This ignores the two selection colors above.\", type: \"switch\", value: false},\n                ]\n            },\n            {\n                id: \"cursor\",\n                name: \"Cursor\",\n                note: \"The cursor in this preview blinks on and off at 1 second intervals for emphasis, it may not match what you see in Ghostty!\",\n                settings: [\n                    {id: \"cursorColor\", name: \"Cursor color\", type: \"color\", value: \"\"},\n                    {id: \"cursorText\", name: \"Text color under cursor\", type: \"color\", value: \"\"},\n                    {id: \"cursorInvertFgBg\", name: \"Invert selection colors\", note: \"Enabling this will cause cells under the cursor to be the inverse of their current colors. This ignores the two selection colors above.\", type: \"switch\", value: false},\n                    {id: \"cursorOpacity\", name: \"Cursor opacity\", type: \"number\", value: 1, range: true, min: 0, max: 1, step: 0.05},\n                    {id: \"cursorStyle\", name: \"Cursor style\", type: \"dropdown\", value: \"block\", options: [\"block\", \"bar\", \"underline\", {value: \"block_hollow\", name: \"hollow block\"}]},\n                    {id: \"cursorStyleBlink\", name: \"Cursor blink style\", note: \"The `default` option defers to DEC mode 12 to determine blinking state.\", type: \"dropdown\", value: \"\", options: [\"true\", \"false\", {value: \"\", name: \"default\"}]},\n                ]\n            },\n            {\n                id: \"palette\",\n                name: \"Color Palette\",\n                note: \"The first 16 colors are the most commonly displayed colors in the terminal.\\n\\nColors 1-8 are typically black, red, green, yellow, blue, magenta, cyan, and white.\\nColors 9-16 are typically \\\"brighter\\\" variants of these colors.\",\n                settings: [\n                    {id: \"palette\", name: \"\", type: \"palette\", value: [\"#1d1f21\",\"#cc6666\",\"#b5bd68\",\"#f0c674\",\"#81a2be\",\"#b294bb\",\"#8abeb7\",\"#c5c8c6\",\"#666666\",\"#d54e53\",\"#b9ca4a\",\"#e7c547\",\"#7aa6da\",\"#c397d8\",\"#70c0b1\",\"#eaeaea\",\"#000000\",\"#00005f\",\"#000087\",\"#0000af\",\"#0000d7\",\"#0000ff\",\"#005f00\",\"#005f5f\",\"#005f87\",\"#005faf\",\"#005fd7\",\"#005fff\",\"#008700\",\"#00875f\",\"#008787\",\"#0087af\",\"#0087d7\",\"#0087ff\",\"#00af00\",\"#00af5f\",\"#00af87\",\"#00afaf\",\"#00afd7\",\"#00afff\",\"#00d700\",\"#00d75f\",\"#00d787\",\"#00d7af\",\"#00d7d7\",\"#00d7ff\",\"#00ff00\",\"#00ff5f\",\"#00ff87\",\"#00ffaf\",\"#00ffd7\",\"#00ffff\",\"#5f0000\",\"#5f005f\",\"#5f0087\",\"#5f00af\",\"#5f00d7\",\"#5f00ff\",\"#5f5f00\",\"#5f5f5f\",\"#5f5f87\",\"#5f5faf\",\"#5f5fd7\",\"#5f5fff\",\"#5f8700\",\"#5f875f\",\"#5f8787\",\"#5f87af\",\"#5f87d7\",\"#5f87ff\",\"#5faf00\",\"#5faf5f\",\"#5faf87\",\"#5fafaf\",\"#5fafd7\",\"#5fafff\",\"#5fd700\",\"#5fd75f\",\"#5fd787\",\"#5fd7af\",\"#5fd7d7\",\"#5fd7ff\",\"#5fff00\",\"#5fff5f\",\"#5fff87\",\"#5fffaf\",\"#5fffd7\",\"#5fffff\",\"#870000\",\"#87005f\",\"#870087\",\"#8700af\",\"#8700d7\",\"#8700ff\",\"#875f00\",\"#875f5f\",\"#875f87\",\"#875faf\",\"#875fd7\",\"#875fff\",\"#878700\",\"#87875f\",\"#878787\",\"#8787af\",\"#8787d7\",\"#8787ff\",\"#87af00\",\"#87af5f\",\"#87af87\",\"#87afaf\",\"#87afd7\",\"#87afff\",\"#87d700\",\"#87d75f\",\"#87d787\",\"#87d7af\",\"#87d7d7\",\"#87d7ff\",\"#87ff00\",\"#87ff5f\",\"#87ff87\",\"#87ffaf\",\"#87ffd7\",\"#87ffff\",\"#af0000\",\"#af005f\",\"#af0087\",\"#af00af\",\"#af00d7\",\"#af00ff\",\"#af5f00\",\"#af5f5f\",\"#af5f87\",\"#af5faf\",\"#af5fd7\",\"#af5fff\",\"#af8700\",\"#af875f\",\"#af8787\",\"#af87af\",\"#af87d7\",\"#af87ff\",\"#afaf00\",\"#afaf5f\",\"#afaf87\",\"#afafaf\",\"#afafd7\",\"#afafff\",\"#afd700\",\"#afd75f\",\"#afd787\",\"#afd7af\",\"#afd7d7\",\"#afd7ff\",\"#afff00\",\"#afff5f\",\"#afff87\",\"#afffaf\",\"#afffd7\",\"#afffff\",\"#d70000\",\"#d7005f\",\"#d70087\",\"#d700af\",\"#d700d7\",\"#d700ff\",\"#d75f00\",\"#d75f5f\",\"#d75f87\",\"#d75faf\",\"#d75fd7\",\"#d75fff\",\"#d78700\",\"#d7875f\",\"#d78787\",\"#d787af\",\"#d787d7\",\"#d787ff\",\"#d7af00\",\"#d7af5f\",\"#d7af87\",\"#d7afaf\",\"#d7afd7\",\"#d7afff\",\"#d7d700\",\"#d7d75f\",\"#d7d787\",\"#d7d7af\",\"#d7d7d7\",\"#d7d7ff\",\"#d7ff00\",\"#d7ff5f\",\"#d7ff87\",\"#d7ffaf\",\"#d7ffd7\",\"#d7ffff\",\"#ff0000\",\"#ff005f\",\"#ff0087\",\"#ff00af\",\"#ff00d7\",\"#ff00ff\",\"#ff5f00\",\"#ff5f5f\",\"#ff5f87\",\"#ff5faf\",\"#ff5fd7\",\"#ff5fff\",\"#ff8700\",\"#ff875f\",\"#ff8787\",\"#ff87af\",\"#ff87d7\",\"#ff87ff\",\"#ffaf00\",\"#ffaf5f\",\"#ffaf87\",\"#ffafaf\",\"#ffafd7\",\"#ffafff\",\"#ffd700\",\"#ffd75f\",\"#ffd787\",\"#ffd7af\",\"#ffd7d7\",\"#ffd7ff\",\"#ffff00\",\"#ffff5f\",\"#ffff87\",\"#ffffaf\",\"#ffffd7\",\"#ffffff\",\"#080808\",\"#121212\",\"#1c1c1c\",\"#262626\",\"#303030\",\"#3a3a3a\",\"#444444\",\"#4e4e4e\",\"#585858\",\"#626262\",\"#6c6c6c\",\"#767676\",\"#808080\",\"#8a8a8a\",\"#949494\",\"#9e9e9e\",\"#a8a8a8\",\"#b2b2b2\",\"#bcbcbc\",\"#c6c6c6\",\"#d0d0d0\",\"#dadada\",\"#e4e4e4\",\"#eeeeee\"]},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"fonts\",\n        name: \"Fonts\",\n        groups: [\n            {\n                id: \"general\",\n                name: \"General Font Settings\",\n                settings: [\n                    {id: \"fontSize\", name: \"Base font size\", type: \"number\", value: 13, min: 4, max: 60, step: 0.5, range: true},\n                    {id: \"fontThicken\", name: \"Thicken fonts\", type: \"switch\", note: \"This currently only affects macOS.\", value: false},\n                    {id: \"fontFeature\", name: \"Font ligature settings\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"family\",\n                name: \"Font Families\",\n                settings: [\n                    {id: \"fontFamily\", name: \"Main font family\", type: \"text\", value: \"\"},\n                    {id: \"fontFamilyBold\", name: \"Font family for bold text\", type: \"text\", value: \"\"},\n                    {id: \"fontFamilyItalic\", name: \"Font family for italic text\", type: \"text\", value: \"\"},\n                    {id: \"fontFamilyBoldItalic\", name: \"Font family for bold italic text\", type: \"text\", value: \"\"},\n                    {id: \"windowTitleFontFamily\", name: \"Window title font family\", note: \"This is currently only supported on macOS\", type: \"text\", value: \"\"},\n                    {id: \"fontCodepointMap\", name: \"Unicode-specifc font mapping\", note: \"\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"styles\",\n                name: \"Font Styles\",\n                note: \"Named font styles for the fields above. For example for `Ioveska Heavy` you would use a style of `Heavy`. Alternately you can set the style to `false` to completely disable the style and revert to default style.\",\n                settings: [\n                    {id: \"fontStyle\", name: \"Main font style\", type: \"text\", value: \"default\"},\n                    {id: \"fontStyleBold\", name: \"Font style for bold text\", type: \"text\", value: \"default\"},\n                    {id: \"fontStyleItalic\", name: \"Font style for italic text\", type: \"text\", value: \"default\"},\n                    {id: \"fontStyleBoldItalic\", name: \"Font style for bold italic text\", type: \"text\", value: \"default\"},\n                ]\n            },\n            {\n                id: \"variations\",\n                name: \"Font Variations\",\n                note: \"Variable font specific settings, please only touch this if you know what you're doing!\",\n                settings: [\n                    {id: \"fontVariation\", name: \"Main font variant\", type: \"text\", value: \"\"},\n                    {id: \"fontVariationBold\", name: \"Font variant for bold text\", type: \"text\", value: \"\"},\n                    {id: \"fontVariationItalic\", name: \"Font variant for italic text\", type: \"text\", value: \"\"},\n                    {id: \"fontVariationBoldItalic\", name: \"Font variant for bold italic text\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"advanced\",\n                name: \"Advanced Font & Cell Settings\",\n                note: \"The settings below have very little validation in Ghostty and can cause your terminal to become unusable. Be careful messing with any of these.\",\n                settings: [\n                    {id: \"adjustCellWidth\", name: \"Cell width adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustCellHeight\", name: \"Cell height adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustFontBaseline\", name: \"Font baseline adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustUnderlinePosition\", name: \"Underline position adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustUnderlineThickness\", name: \"Underline thickness adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustStrikethroughPosition\", name: \"Strikethrough position adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustStrikethroughThickness\", name: \"Strikethrough thickness adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustCursorThickness\", name: \"Cursor thickness adjustment\", type: \"text\", value: \"\"},\n                    {id: \"graphemeWidthMethod\", name: \"Grapheme width calculation method\", type: \"dropdown\", value: \"unicode\", options: [\"unicode\", \"legacy\"]},\n                ]\n            },\n\n        ]\n    },\n    {\n        id: \"keybinds\",\n        name: \"Keybinds\",\n        groups: [\n            {\n                id: \"keybinds\",\n                name: \"\",\n                settings: [\n                    {id: \"keybind\", name: \"\", type: \"keybinds\", value: [\"super+page_up=scroll_page_up\", \"super+physical:four=goto_tab:4\", \"super+shift+down=jump_to_prompt:1\", \"super+shift+w=close_window\", \"super+shift+left_bracket=previous_tab\", \"super+alt+i=inspector:toggle\", \"super+w=close_surface\", \"super+physical:eight=goto_tab:8\", \"super+alt+right=goto_split:right\", \"shift+up=adjust_selection:up\", \"super+enter=toggle_fullscreen\", \"super+t=new_tab\", \"super+c=copy_to_clipboard\", \"super+shift+right_bracket=next_tab\", \"super+physical:one=goto_tab:1\", \"shift+left=adjust_selection:left\", \"super+equal=increase_font_size:1\", \"shift+page_up=adjust_selection:page_up\", \"super+physical:three=goto_tab:3\", \"super+d=new_split:right\", \"super+ctrl+down=resize_split:down,10\", \"shift+end=adjust_selection:end\", \"super+plus=increase_font_size:1\", \"super+q=quit\", \"super+home=scroll_to_top\", \"super+ctrl+left=resize_split:left,10\", \"super+ctrl+up=resize_split:up,10\", \"super+shift+up=jump_to_prompt:-1\", \"shift+right=adjust_selection:right\", \"super+comma=open_config\", \"super+shift+comma=reload_config\", \"super+minus=decrease_font_size:1\", \"shift+page_down=adjust_selection:page_down\", \"super+a=select_all\", \"alt+shift+equal=equalize_splits\", \"super+shift+enter=toggle_split_zoom\", \"super+alt+down=goto_split:bottom\", \"super+ctrl+f=toggle_fullscreen\", \"super+ctrl+right=resize_split:right,10\", \"super+alt+shift+j=write_scrollback_file:open\", \"shift+down=adjust_selection:down\", \"super+n=new_window\", \"super+alt+left=goto_split:left\", \"super+page_down=scroll_page_down\", \"super+alt+shift+w=close_all_windows\", \"super+alt+up=goto_split:top\", \"super+left_bracket=goto_split:previous\", \"super+physical:nine=goto_tab:9\", \"super+right_bracket=goto_split:next\", \"super+end=scroll_to_bottom\", \"super+shift+j=write_scrollback_file:paste\", \"super+shift+d=new_split:down\", \"super+zero=reset_font_size\", \"super+physical:five=goto_tab:5\", \"shift+home=adjust_selection:home\", \"super+physical:seven=goto_tab:7\", \"super+k=clear_screen\", \"super+physical:two=goto_tab:2\", \"super+physical:six=goto_tab:6\", \"super+v=paste_from_clipboard\"]}\n                ]\n            }\n        ]\n    },\n    {\n        id: \"mouse\",\n        name: \"Mouse\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"cursorClickToMove\", name: \"Enable click to move cursor\", type: \"switch\", value: true},\n                    {id: \"mouseHideWhileTyping\", name: \"Hide mouse while typing\", type: \"switch\", value: false},\n                    {id: \"mouseShiftCapture\", name: \"Allow shift with mouse click\", type: \"dropdown\", value: \"false\", options: [\"true\", \"false\", \"always\", \"never\"]},\n                    // Technically the values should be min: 0.01, max: 10000, step: 0.01 but those are insane so instead I'll use sane defaults\n                    {id: \"mouseScrollMultiplier\", name: \"Mouse scroll multiplier\", type: \"number\", range: true, value: 1, min: 0.1, max: 10, step: 0.1},\n                    {id: \"focusFollowsMouse\", name: \"Focus splits on mouse move\", type: \"switch\", value: false},\n                    {id: \"clickRepeatInterval\", name: \"Milliseconds between multi-click\", note: \"A value of 0 means to use the operating system's default timing.\", type: \"number\", value: 0, min: 0, size: 4},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"gtk\",\n        name: \"GTK\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"class\", name: \"WM_CLASS class field\", note: \"This defaults to `com.mitchellh.ghostty`\", type: \"text\", value: \"\"},\n                    {id: \"x11InstanceName\", name: \"WM_CLASS instance name\", note: \"This defaults to `ghostty`\", type: \"text\", value: \"\"},\n                    {id: \"gtkSingleInstance\", name: \"Single-instance mode\", type: \"dropdown\", value: \"desktop\", options: [{name: \"detect\", value: \"desktop\"}, \"true\", \"false\"]},\n                    {id: \"gtkTitlebar\", name: \"Show titlebar\", type: \"switch\", value: true},\n                    {id: \"gtkTabsLocation\", name: \"Tab location\", type: \"dropdown\", value: \"top\", options: [\"top\", \"right\", \"bottom\", \"left\"]},\n                    {id: \"gtkWideTabs\", name: \"Use wide tabs\", type: \"switch\", value: true},\n                    {id: \"gtkAdwaita\", name: \"Enable adwaita theme support\", type: \"switch\", value: true},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"linux\",\n        name: \"Linux\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"linuxCgroup\", name: \"Use dedicated cgroups\", type: \"dropdown\", value: \"single-instance\", options: [\"single-instance\", \"always\", \"never\"]},\n                    {id: \"linuxCgroupMemoryLimit\", name: \"Memory limit (bytes)\", type: \"number\", min: 0, max: 4294967295, size: 12},\n                    {id: \"linuxCgroupProcessLimit\", name: \"Max number of processes\", type: \"number\", min: 0, size: 5},\n                    {id: \"linuxCgroupHardFail\", name: \"Hard fail on startup\", type: \"switch\", value: false},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"macos\",\n        name: \"macOS\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"macosNonNativeFullscreen\", name: \"Use non-native fullscreen\", note: \"Tabs currently do not work with non-native fullscreen windows\", type: \"dropdown\", value: \"false\", options: [\"visible-menu\", \"true\", \"false\"]},\n                    {id: \"macosTitlebarStyle\", name: \"Titlebar style\", type: \"dropdown\", value: \"transparent\", options: [\"transparent\", \"native\", \"tabs\"]},\n                    {id: \"macosOptionAsAlt\", name: \"Use option key as alt key\", type: \"dropdown\", value: \"false\", options: [\"true\", \"false\", \"left\", \"right\"]},\n                    {id: \"macosWindowShadow\", name: \"Show the window shadow\", type: \"switch\", value: true},\n                ]\n            }\n        ]\n    },\n] as Panel[];\n```\n```typescript\n\nconst {colorSchemeResponse} = await fetchColorScheme(config ? config.theme : \"\");\nconst colorScheme = parseColorScheme(colorSchemeResponse);\n// error: 'colorScheme' is assigned a value but never used. Allowed unused vars must match /^_/u.\n\nexport default [\n```\n\n\nI understand the confusion. The issue is that we're trying to use Svelte-specific reactive statements in a TypeScript file. Let's modify the approach to work with TypeScript and the existing structure. Here's how we can update the `config.svelte.ts` file to handle theme changes:\n\n1. First, import the necessary functions from the `settings.ts` file:\n\n```typescript\nimport { fetchColorScheme, parseColorScheme } from \"$lib/data/settings\";\n```\n\n2. Add a new function to handle theme changes:\n\n```typescript\nasync function handleThemeChange(themeName: string) {\n    if (!themeName) return;\n    \n    try {\n        const { colorSchemeResponse } = await fetchColorScheme(themeName);\n        const colorScheme = parseColorScheme(colorSchemeResponse);\n\n        // Apply the theme colors to the config\n        if (colorScheme.background) config.background = colorScheme.background;\n        if (colorScheme.foreground) config.foreground = colorScheme.foreground;\n        if (colorScheme.selectionBackground) config.selectionBackground = colorScheme.selectionBackground;\n        if (colorScheme.selectionForeground) config.selectionForeground = colorScheme.selectionForeground;\n        if (colorScheme.cursorColor) config.cursorColor = colorScheme.cursorColor;\n\n        if (colorScheme.palette) {\n            const newPalette = Array(256).fill('#000000');\n            for (const [index, color] of Object.entries(colorScheme.palette)) {\n                newPalette[parseInt(index)] = color as HexColor;\n            }\n            config.palette = newPalette;\n        }\n    } catch (error) {\n        console.error(\"Error applying theme:\", error);\n    }\n}\n```\n\n3. Modify the `load` function to call `handleThemeChange` when the theme is changed:\n\n```typescript\nexport function load(conf: Partial<typeof config>) {\n    for (const key in conf) {\n        if (!(key in config)) continue;\n        if (key !== \"keybind\" && key !== \"palette\") {\n            config[key as keyof typeof config] = conf[key as keyof typeof config];\n            \n            // Call handleThemeChange when the theme is changed\n            if (key === 'theme') {\n                handleThemeChange(conf[key] as string);\n            }\n        }\n        else if (key === \"keybind\") {\n            config.keybind = [...config.keybind, ...conf.keybind];\n        }\n        else if (key === \"palette\") {\n            for (let p = 0; p < conf.palette.length; p++) {\n                if (!conf.palette[p]) continue;\n                config.palette[p] = conf.palette[p];\n            }\n        }\n    }\n}\n```\n\n4. Remove the unused `colorScheme` variable from the `settings.ts` file to resolve the ESLint warning:\n\n```typescript\n// Remove or comment out these lines\n// const {colorSchemeResponse} = await fetchColorScheme(config ? config.theme : \"\");\n// const colorScheme = parseColorScheme(colorSchemeResponse);\n```\n\nThese changes will apply the theme colors when a new theme is selected, without using Svelte-specific reactive statements. The theme will be applied when the configuration is loaded or when the theme is changed through the UI.\nThe color palette is not being updated when I make a selection from the theme dropdown menu\n```ts ghostty-config/src/lib/data/settings.ts\nimport config from \"$lib/stores/config.svelte\";\nimport type {HexColor} from \"$lib/utils/colors\";\n\ninterface BaseSettingType {\n    id: string;\n    name: string;\n    note?: string;\n}\n\ninterface Panel extends BaseSettingType {\n    groups: Group[];\n}\n\ninterface Group extends BaseSettingType {\n    settings: (Switch | Text | Number | Dropdown | Color | Palette | Keybinds)[];\n    // type: \"group\";\n}\n\ntype SettingType = \"switch\" | \"number\" | \"dropdown\" | \"text\" | \"color\" | \"palette\" | \"keybinds\";\n\ninterface BaseSettingItem extends BaseSettingType {\n    type: SettingType;\n    value: unknown;\n}\n\ninterface Switch extends BaseSettingItem {\n    type: \"switch\";\n    value: boolean;\n}\n\ninterface Text extends BaseSettingItem {\n    type: \"text\";\n    value: string;\n}\n\ninterface Number extends BaseSettingItem {\n    type: \"number\";\n    value: number;\n    min?: number;\n    max?: number;\n    step?: number;\n    size?: number;\n    range?: boolean;\n}\n\ninterface DropdownOption {\n    name: string;\n    value: string;\n}\n\ninterface Dropdown extends BaseSettingItem {\n    type: \"dropdown\";\n    value: \"string\";\n    options: (DropdownOption | string)[];\n}\n\ninterface Color extends BaseSettingItem {\n    value: HexColor;\n    type: \"color\";\n}\n\ninterface Palette extends BaseSettingItem {\n    value: HexColor[];\n    type: \"palette\";\n}\n\nexport type KeybindString = `${string}=${string}`;\ninterface Keybinds extends BaseSettingItem {\n    value: KeybindString[];\n    type: \"keybinds\";\n}\n\ninterface ThemeResponse {\n  \"type\": string;\n  \"encoding\": string;\n  \"size\": number;\n  \"name\": string;\n  \"path\": string;\n  \"content\": string;\n  \"sha\": string;\n  \"url\": string;\n  \"git_url\": string;\n  \"html_url\": string;\n  \"download_url\": string;\n  \"_links\": {\n    \"git\": string;\n    \"self\": string;\n    \"html\": string;\n  }\n}\n\ninterface ColorScheme {\n  palette: { [key: string]: string };\n  background?: string;\n  foreground?: string;\n  cursorColor?: string;\n  selectionBackground?: string;\n  selectionForeground?: string;\n}\n\nconst fetchThemeFiles = async () => {\n    const apiUrl = \"https://api.github.com/repos/mbadolato/iTerm2-Color-Schemes/contents/ghostty\";\n\n    const response = await fetch(apiUrl);\n\n    if (!response.ok) {\n        throw new Error(`Error fetching data: ${response.statusText}`);\n    }\n\n    const themeFiles = await response.json();\n\n    return {themeFiles};\n};\n\n// Function to convert raw string data into a JSON object\nexport const parseColorScheme = (input: string): ColorScheme => {\n  const colorScheme: ColorScheme = {palette: {}};\n\n  // Split input by lines\n  const lines = input.split(\"\\n\");\n\n  lines.forEach((line) => {\n    if (line.startsWith(\"palette\")) {\n      const [, rest] = line.split(\"palette =\").map(part => part.trim());\n\n      if (rest) {\n        const [paletteIndex, color] = rest.split(\"=\");\n        if (paletteIndex && color) {\n          colorScheme.palette[paletteIndex.trim()] = color.trim();\n        }\n      }\n    }\n    else {\n      const [key, value] = line.split(\"=\").map(part => part.trim());\n\n      switch (key) {\n        case \"background\":\n          colorScheme.background = `#${value}`;\n          break;\n        case \"foreground\":\n          colorScheme.foreground = `#${value}`;\n          break;\n        case \"cursor-color\":\n          colorScheme.cursorColor = `#${value}`;\n          break;\n        case \"selection-background\":\n          colorScheme.selectionBackground = `#${value}`;\n          break;\n        case \"selection-foreground\":\n          colorScheme.selectionForeground = `#${value}`;\n          break;\n        default:\n          break;\n      }\n    }\n  });\n\n  return colorScheme;\n};\n\nexport const fetchColorScheme = async (theme: string) => {\n    const apiUrl = `https://api.github.com/repos/mbadolato/iTerm2-Color-Schemes/contents/ghostty${theme ? \"/\" + theme : \"\"}`;\n\n    const response = await fetch(apiUrl,{\n        headers: {\n            Accept: \"application/vnd.github.raw+json\"\n        }\n    });\n\n    if (!response.ok) {\n        throw new Error(`Error fetching data: ${response.statusText}`);\n    }\n\n    const colorSchemeResponse = await response.text();\n\n    return {colorSchemeResponse};\n};\n\nconst {themeFiles} = await fetchThemeFiles();\nconst themeFileNames = themeFiles && themeFiles.map((file: ThemeResponse) => file.name);\n\n// const {colorSchemeResponse} = await fetchColorScheme(config ? config.theme : \"\");\n// const colorScheme = parseColorScheme(colorSchemeResponse);\n\nexport default [\n    {\n        id: \"application\",\n        name: \"Application\",\n        note: \"\",\n        groups: [\n            {\n                id: \"general\",\n                name: \"\",\n                // type: \"group\",\n                settings: [\n                    {id: \"title\", name: \"Static title for all windows\", type: \"text\", value: \"\"},\n                    {id: \"desktopNotifications\", name: \"Allow desktop notifications\", type: \"switch\", value: true},\n                    {id: \"configFile\", name: \"Additional config file\", type: \"text\", value: \"\"},\n                    {id: \"configDefaultFiles\", name: \"Load default config file\", type: \"switch\", value: true},\n                    {id: \"linkUrl\", name: \"Automatically link URLs\", note: \"Matching occurs while holding the control (Linux) or command (macOS) key.\", type: \"switch\", value: true},\n                ]\n            },\n            {\n                id: \"startup\",\n                name: \"Startup\",\n                // type: \"group\",\n                settings: [\n                    {id: \"command\", name: \"Command to run on launch\", type: \"text\", value: \"\"},\n                    {id: \"fullscreen\", name: \"Launch in fullscreen mode\", type: \"switch\", value: false},\n                    {id: \"initialWindow\", name: \"Show a window on startup\", type: \"switch\", value: true},\n                    {id: \"workingDirectory\", name: \"Directory to use after startup\", note: \"Special values of `home` and `inherit` are also allowed here.\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"shutdown\",\n                name: \"Shutdown\",\n                // type: \"group\",\n                settings: [\n                    {id: \"waitAfterCommand\", name: \"Wait for input after command\", type: \"switch\", value: false},\n                    {id: \"abnormalCommandExitRuntime\", name: \"Abnormal command exit runtime\", type: \"number\", value: 250, min: 0, size: 5},\n                    {id: \"confirmCloseSurface\", name: \"Confirm when closing a surface\", type: \"switch\", value: true},\n                    {id: \"quitAfterLastWindowClosed\", name: \"Quit after closing last window\", type: \"switch\", value: false},\n                    {id: \"quitAfterLastWindowClosedDelay\", name: \"Delay before auto quitting\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"shell\",\n                name: \"Shell Integration\",\n                // type: \"group\",\n                settings: [\n                    {id: \"shellIntegration\", name: \"Shell integration style\", type: \"dropdown\", value: \"detect\", options: [\"none\", \"detect\", \"bash\", \"elvish\", \"fish\", \"zsh\"]},\n                    {id: \"shellIntegrationFeatures\", name: \"Shell integration features\", note: \"The current available features are cursor, sudo, and title. Including one force enables it, prefixing it with `no-` force disables it, omitting it falls back to default.\", type: \"text\", value: \"cursor,no-sudo,title\"},\n                    {id: \"term\", name: \"TERM environment variable\", type: \"text\", value: \"xterm-ghostty\"},\n                ]\n            },\n            {\n                id: \"advanced\",\n                name: \"Advanced\",\n                note: \"You should only touch these settings if you know what you're doing, otherwise you could cause major issues with Ghostty!\",\n                // type: \"group\",\n                settings: [\n                    {id: \"scrollbackLimit\", name: \"Scrollback buffer size (bytes)\", note: \"This buffer exists completely in memory but is allocated lazily.\", type: \"number\", value: 10000000, min: 0, size: 10},\n                    {id: \"customShader\", name: \"Custom shader\", note: \"This matches the API of Shadertoy.\", type: \"text\", value: \"\"},\n                    {id: \"customShaderAnimation\", name: \"Allow shaders to animate\", type: \"dropdown\", value: \"false\", options: [\"false\", \"true\", \"always\"]},\n                    {id: \"enquiryResponse\", name: \"Reponse to ENQ\", type: \"text\", value: \"\"},\n                    {id: \"oscColorReportFormat\", name: \"OSC color report format\", type: \"dropdown\", value: \"16-bit\", options: [\"none\", \"8-bit\", \"16-bit\"]},\n                    {id: \"vtKamAllowed\", name: \"VT kam mode allowed\", note: \"If you don't know what this is, don't touch it!\", type: \"switch\", value: false},\n                ]\n            },\n        ]\n    },\n    {\n        id: \"clipboard\",\n        name: \"Clipboard\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"clipboardRead\", name: \"Allow terminal to read clipboard\", type: \"dropdown\", value: \"ask\", options: [\"ask\", \"allow\", \"deny\"]},\n                    {id: \"clipboardWrite\", name: \"Allow terminal to write clipboard\", type: \"dropdown\", value: \"ask\", options: [\"ask\", \"allow\", \"deny\"]},\n                    {id: \"copyOnSelect\", name: \"Copy on select\", type: \"switch\", value: true},\n                    {id: \"clipboardTrimTrailingSpaces\", name: \"Trim trailing space on copy\", type: \"switch\", value: true},\n                    {id: \"clipboardPasteProtection\", name: \"Confirm when pasting unsafely\", type: \"switch\", value: true},\n                    {id: \"clipboardPasteBracketedSafe\", name: \"Mark bracketed paste as safe\", type: \"switch\", value: true},\n                    {id: \"imageStorageLimit\", name: \"Image buffer limit (bytes)\", type: \"number\", value: 320000000, min: 0, max: 4294967295, size: 12},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"window\",\n        name: \"Window\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"windowVsync\", name: \"Enable vsync\", type: \"switch\", value: true},\n                    {id: \"windowInheritWorkingDirectory\", name: \"Inherit working directory\", type: \"switch\", value: true},\n                    {id: \"windowInheritFontSize\", name: \"Inherit font size\", type: \"switch\", value: true},\n                    {id: \"windowColorspace\", name: \"Window colorspace\", type: \"dropdown\", value: \"srgb\", options: [\"srgb\", \"display-p3\"]},\n                    {id: \"windowSaveState\", name: \"Save window state\", type: \"dropdown\", value: \"default\", options: [\"default\", \"never\", \"always\"]},\n                    // maybe move to application?\n                    {id: \"windowNewTabPosition\", name: \"New tab position\", type: \"dropdown\", value: \"current\", options: [\"current\", \"end\"]},\n                ]\n            },\n            {\n                id: \"appearance\",\n                name: \"Appearance\",\n                settings: [\n                    {id: \"windowTheme\", name: \"Window theme\", type: \"dropdown\", value: \"auto\", options: [\"auto\", \"system\", \"light\", \"dark\"]},\n                    {id: \"windowDecoration\", name: \"Enable native frames\", type: \"switch\", value: true},\n                    {id: \"windowPaddingX\", name: \"Horizontal window padding\", type: \"text\", value: \"2\"},\n                    {id: \"windowPaddingY\", name: \"Vertical window padding\", type: \"text\", value: \"2\"},\n                    {id: \"windowPaddingBalance\", name: \"Auto-balance window padding\", type: \"switch\", value: false},\n                    {id: \"windowPaddingColor\", name: \"Window padding color\", type: \"dropdown\", value: \"extend\", options: [\"background\", \"extend\", \"extend-always\"]},\n\n                    // maybe move to colors\n                    {id: \"backgroundOpacity\", name: \"Background opacity\", type: \"number\", range: true, value: 1, min: 0, max: 1, step: 0.01},\n                    {id: \"backgroundBlurRadius\", name: \"Background blur radius\", note: \"A value of 20 is reasonable for a good looking blur, going beyond that can cause rendering and performance issues.\", type: \"number\", range: true, value: 0, min: 0, max: 50, step: 1},\n                    {id: \"unfocusedSplitOpacity\", name: \"Unfocused split opacity\", type: \"number\", range: true, value: 0.7, min: 0.15, max: 1, step: 0.01},\n                    {id: \"unfocusedSplitFill\", name: \"Unfocused split fill color\", type: \"color\", value: \"\"},\n                ]\n            },\n            {\n                id: \"resize\",\n                name: \"Sizing & Resizing\",\n                settings: [\n                    {id: \"windowHeight\", name: \"Initial window height\", note: \"This size is not in pixels but in number of terminal grid cells\", type: \"number\", value: 0, min: 4, step: 1, size: 4},\n                    {id: \"windowWidth\", name: \"Initial window width\", note: \"This size is not in pixels but in number of terminal grid cells\", type: \"number\", value: 0, min: 10, step: 1, size: 4},\n                    {id: \"windowStepResize\", name: \"Resize in grid cell increments\", type: \"switch\", value: false},\n                    {id: \"resizeOverlay\", name: \"Show resize overlays\", type: \"dropdown\", value: \"after-first\", options: [\"always\", \"never\", \"after-first\"]},\n                    {id: \"resizeOverlayPosition\", name: \"Resize overlay position\", type: \"dropdown\", value: \"center\", options: [\"center\", \"top-left\", \"top-center\", \"top-right\", \"bottom-left\", \"bottom-center\", \"bottom-right\"]},\n                    {id: \"resizeOverlayDuration\", name: \"Show resize overlay time\", type: \"text\", value: \"750ms\"},\n                ]\n            },\n        ]\n    },\n    {\n        id: \"colors\",\n        name: \"Colors\",\n        groups: [\n            {\n                id: \"general\",\n                name: \"\",\n                settings: [\n                    {\n                        id: \"theme\",\n                        name: \"Color theme\",\n                        note: \"Any colors selected after setting this will overwrite the theme's colors.\",\n                        type: \"dropdown\",\n                        value: \"\",\n                        options: [\"\", ...themeFileNames]\n                    },\n                    {id: \"boldIsBright\", name: \"Bold text uses bright colors\", type: \"switch\", value: false},\n                    {id: \"minimumContrast\", name: \"Minimum contrast\", type: \"number\", value: 1, range: true, min: 1, max: 21, step: 0.1},\n                ]\n            },\n            {\n                id: \"base\",\n                name: \"Base Colors\",\n                note: \"The preview here shows selected text in the second line of the command output.\",\n                settings: [\n                    {id: \"background\", name: \"Background color\", type: \"color\", value: \"#282c34\"},\n                    {id: \"foreground\", name: \"Foreground color\", type: \"color\", value: \"#ffffff\"},\n                    {id: \"selectionBackground\", name: \"Selection background color\", type: \"color\", value: \"\"},\n                    {id: \"selectionForeground\", name: \"Selection foreground color\", type: \"color\", value: \"\"},\n                    {id: \"selectionInvertFgBg\", name: \"Invert selection colors\", note: \"Enabling this will cause selections to be the inverse of their current colors. This ignores the two selection colors above.\", type: \"switch\", value: false},\n                ]\n            },\n            {\n                id: \"cursor\",\n                name: \"Cursor\",\n                note: \"The cursor in this preview blinks on and off at 1 second intervals for emphasis, it may not match what you see in Ghostty!\",\n                settings: [\n                    {id: \"cursorColor\", name: \"Cursor color\", type: \"color\", value: \"\"},\n                    {id: \"cursorText\", name: \"Text color under cursor\", type: \"color\", value: \"\"},\n                    {id: \"cursorInvertFgBg\", name: \"Invert selection colors\", note: \"Enabling this will cause cells under the cursor to be the inverse of their current colors. This ignores the two selection colors above.\", type: \"switch\", value: false},\n                    {id: \"cursorOpacity\", name: \"Cursor opacity\", type: \"number\", value: 1, range: true, min: 0, max: 1, step: 0.05},\n                    {id: \"cursorStyle\", name: \"Cursor style\", type: \"dropdown\", value: \"block\", options: [\"block\", \"bar\", \"underline\", {value: \"block_hollow\", name: \"hollow block\"}]},\n                    {id: \"cursorStyleBlink\", name: \"Cursor blink style\", note: \"The `default` option defers to DEC mode 12 to determine blinking state.\", type: \"dropdown\", value: \"\", options: [\"true\", \"false\", {value: \"\", name: \"default\"}]},\n                ]\n            },\n            {\n                id: \"palette\",\n                name: \"Color Palette\",\n                note: \"The first 16 colors are the most commonly displayed colors in the terminal.\\n\\nColors 1-8 are typically black, red, green, yellow, blue, magenta, cyan, and white.\\nColors 9-16 are typically \\\"brighter\\\" variants of these colors.\",\n                settings: [\n                    {id: \"palette\", name: \"\", type: \"palette\", value: [\"#1d1f21\",\"#cc6666\",\"#b5bd68\",\"#f0c674\",\"#81a2be\",\"#b294bb\",\"#8abeb7\",\"#c5c8c6\",\"#666666\",\"#d54e53\",\"#b9ca4a\",\"#e7c547\",\"#7aa6da\",\"#c397d8\",\"#70c0b1\",\"#eaeaea\",\"#000000\",\"#00005f\",\"#000087\",\"#0000af\",\"#0000d7\",\"#0000ff\",\"#005f00\",\"#005f5f\",\"#005f87\",\"#005faf\",\"#005fd7\",\"#005fff\",\"#008700\",\"#00875f\",\"#008787\",\"#0087af\",\"#0087d7\",\"#0087ff\",\"#00af00\",\"#00af5f\",\"#00af87\",\"#00afaf\",\"#00afd7\",\"#00afff\",\"#00d700\",\"#00d75f\",\"#00d787\",\"#00d7af\",\"#00d7d7\",\"#00d7ff\",\"#00ff00\",\"#00ff5f\",\"#00ff87\",\"#00ffaf\",\"#00ffd7\",\"#00ffff\",\"#5f0000\",\"#5f005f\",\"#5f0087\",\"#5f00af\",\"#5f00d7\",\"#5f00ff\",\"#5f5f00\",\"#5f5f5f\",\"#5f5f87\",\"#5f5faf\",\"#5f5fd7\",\"#5f5fff\",\"#5f8700\",\"#5f875f\",\"#5f8787\",\"#5f87af\",\"#5f87d7\",\"#5f87ff\",\"#5faf00\",\"#5faf5f\",\"#5faf87\",\"#5fafaf\",\"#5fafd7\",\"#5fafff\",\"#5fd700\",\"#5fd75f\",\"#5fd787\",\"#5fd7af\",\"#5fd7d7\",\"#5fd7ff\",\"#5fff00\",\"#5fff5f\",\"#5fff87\",\"#5fffaf\",\"#5fffd7\",\"#5fffff\",\"#870000\",\"#87005f\",\"#870087\",\"#8700af\",\"#8700d7\",\"#8700ff\",\"#875f00\",\"#875f5f\",\"#875f87\",\"#875faf\",\"#875fd7\",\"#875fff\",\"#878700\",\"#87875f\",\"#878787\",\"#8787af\",\"#8787d7\",\"#8787ff\",\"#87af00\",\"#87af5f\",\"#87af87\",\"#87afaf\",\"#87afd7\",\"#87afff\",\"#87d700\",\"#87d75f\",\"#87d787\",\"#87d7af\",\"#87d7d7\",\"#87d7ff\",\"#87ff00\",\"#87ff5f\",\"#87ff87\",\"#87ffaf\",\"#87ffd7\",\"#87ffff\",\"#af0000\",\"#af005f\",\"#af0087\",\"#af00af\",\"#af00d7\",\"#af00ff\",\"#af5f00\",\"#af5f5f\",\"#af5f87\",\"#af5faf\",\"#af5fd7\",\"#af5fff\",\"#af8700\",\"#af875f\",\"#af8787\",\"#af87af\",\"#af87d7\",\"#af87ff\",\"#afaf00\",\"#afaf5f\",\"#afaf87\",\"#afafaf\",\"#afafd7\",\"#afafff\",\"#afd700\",\"#afd75f\",\"#afd787\",\"#afd7af\",\"#afd7d7\",\"#afd7ff\",\"#afff00\",\"#afff5f\",\"#afff87\",\"#afffaf\",\"#afffd7\",\"#afffff\",\"#d70000\",\"#d7005f\",\"#d70087\",\"#d700af\",\"#d700d7\",\"#d700ff\",\"#d75f00\",\"#d75f5f\",\"#d75f87\",\"#d75faf\",\"#d75fd7\",\"#d75fff\",\"#d78700\",\"#d7875f\",\"#d78787\",\"#d787af\",\"#d787d7\",\"#d787ff\",\"#d7af00\",\"#d7af5f\",\"#d7af87\",\"#d7afaf\",\"#d7afd7\",\"#d7afff\",\"#d7d700\",\"#d7d75f\",\"#d7d787\",\"#d7d7af\",\"#d7d7d7\",\"#d7d7ff\",\"#d7ff00\",\"#d7ff5f\",\"#d7ff87\",\"#d7ffaf\",\"#d7ffd7\",\"#d7ffff\",\"#ff0000\",\"#ff005f\",\"#ff0087\",\"#ff00af\",\"#ff00d7\",\"#ff00ff\",\"#ff5f00\",\"#ff5f5f\",\"#ff5f87\",\"#ff5faf\",\"#ff5fd7\",\"#ff5fff\",\"#ff8700\",\"#ff875f\",\"#ff8787\",\"#ff87af\",\"#ff87d7\",\"#ff87ff\",\"#ffaf00\",\"#ffaf5f\",\"#ffaf87\",\"#ffafaf\",\"#ffafd7\",\"#ffafff\",\"#ffd700\",\"#ffd75f\",\"#ffd787\",\"#ffd7af\",\"#ffd7d7\",\"#ffd7ff\",\"#ffff00\",\"#ffff5f\",\"#ffff87\",\"#ffffaf\",\"#ffffd7\",\"#ffffff\",\"#080808\",\"#121212\",\"#1c1c1c\",\"#262626\",\"#303030\",\"#3a3a3a\",\"#444444\",\"#4e4e4e\",\"#585858\",\"#626262\",\"#6c6c6c\",\"#767676\",\"#808080\",\"#8a8a8a\",\"#949494\",\"#9e9e9e\",\"#a8a8a8\",\"#b2b2b2\",\"#bcbcbc\",\"#c6c6c6\",\"#d0d0d0\",\"#dadada\",\"#e4e4e4\",\"#eeeeee\"]},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"fonts\",\n        name: \"Fonts\",\n        groups: [\n            {\n                id: \"general\",\n                name: \"General Font Settings\",\n                settings: [\n                    {id: \"fontSize\", name: \"Base font size\", type: \"number\", value: 13, min: 4, max: 60, step: 0.5, range: true},\n                    {id: \"fontThicken\", name: \"Thicken fonts\", type: \"switch\", note: \"This currently only affects macOS.\", value: false},\n                    {id: \"fontFeature\", name: \"Font ligature settings\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"family\",\n                name: \"Font Families\",\n                settings: [\n                    {id: \"fontFamily\", name: \"Main font family\", type: \"text\", value: \"\"},\n                    {id: \"fontFamilyBold\", name: \"Font family for bold text\", type: \"text\", value: \"\"},\n                    {id: \"fontFamilyItalic\", name: \"Font family for italic text\", type: \"text\", value: \"\"},\n                    {id: \"fontFamilyBoldItalic\", name: \"Font family for bold italic text\", type: \"text\", value: \"\"},\n                    {id: \"windowTitleFontFamily\", name: \"Window title font family\", note: \"This is currently only supported on macOS\", type: \"text\", value: \"\"},\n                    {id: \"fontCodepointMap\", name: \"Unicode-specifc font mapping\", note: \"\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"styles\",\n                name: \"Font Styles\",\n                note: \"Named font styles for the fields above. For example for `Ioveska Heavy` you would use a style of `Heavy`. Alternately you can set the style to `false` to completely disable the style and revert to default style.\",\n                settings: [\n                    {id: \"fontStyle\", name: \"Main font style\", type: \"text\", value: \"default\"},\n                    {id: \"fontStyleBold\", name: \"Font style for bold text\", type: \"text\", value: \"default\"},\n                    {id: \"fontStyleItalic\", name: \"Font style for italic text\", type: \"text\", value: \"default\"},\n                    {id: \"fontStyleBoldItalic\", name: \"Font style for bold italic text\", type: \"text\", value: \"default\"},\n                ]\n            },\n            {\n                id: \"variations\",\n                name: \"Font Variations\",\n                note: \"Variable font specific settings, please only touch this if you know what you're doing!\",\n                settings: [\n                    {id: \"fontVariation\", name: \"Main font variant\", type: \"text\", value: \"\"},\n                    {id: \"fontVariationBold\", name: \"Font variant for bold text\", type: \"text\", value: \"\"},\n                    {id: \"fontVariationItalic\", name: \"Font variant for italic text\", type: \"text\", value: \"\"},\n                    {id: \"fontVariationBoldItalic\", name: \"Font variant for bold italic text\", type: \"text\", value: \"\"},\n                ]\n            },\n            {\n                id: \"advanced\",\n                name: \"Advanced Font & Cell Settings\",\n                note: \"The settings below have very little validation in Ghostty and can cause your terminal to become unusable. Be careful messing with any of these.\",\n                settings: [\n                    {id: \"adjustCellWidth\", name: \"Cell width adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustCellHeight\", name: \"Cell height adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustFontBaseline\", name: \"Font baseline adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustUnderlinePosition\", name: \"Underline position adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustUnderlineThickness\", name: \"Underline thickness adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustStrikethroughPosition\", name: \"Strikethrough position adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustStrikethroughThickness\", name: \"Strikethrough thickness adjustment\", type: \"text\", value: \"\"},\n                    {id: \"adjustCursorThickness\", name: \"Cursor thickness adjustment\", type: \"text\", value: \"\"},\n                    {id: \"graphemeWidthMethod\", name: \"Grapheme width calculation method\", type: \"dropdown\", value: \"unicode\", options: [\"unicode\", \"legacy\"]},\n                ]\n            },\n\n        ]\n    },\n    {\n        id: \"keybinds\",\n        name: \"Keybinds\",\n        groups: [\n            {\n                id: \"keybinds\",\n                name: \"\",\n                settings: [\n                    {id: \"keybind\", name: \"\", type: \"keybinds\", value: [\"super+page_up=scroll_page_up\", \"super+physical:four=goto_tab:4\", \"super+shift+down=jump_to_prompt:1\", \"super+shift+w=close_window\", \"super+shift+left_bracket=previous_tab\", \"super+alt+i=inspector:toggle\", \"super+w=close_surface\", \"super+physical:eight=goto_tab:8\", \"super+alt+right=goto_split:right\", \"shift+up=adjust_selection:up\", \"super+enter=toggle_fullscreen\", \"super+t=new_tab\", \"super+c=copy_to_clipboard\", \"super+shift+right_bracket=next_tab\", \"super+physical:one=goto_tab:1\", \"shift+left=adjust_selection:left\", \"super+equal=increase_font_size:1\", \"shift+page_up=adjust_selection:page_up\", \"super+physical:three=goto_tab:3\", \"super+d=new_split:right\", \"super+ctrl+down=resize_split:down,10\", \"shift+end=adjust_selection:end\", \"super+plus=increase_font_size:1\", \"super+q=quit\", \"super+home=scroll_to_top\", \"super+ctrl+left=resize_split:left,10\", \"super+ctrl+up=resize_split:up,10\", \"super+shift+up=jump_to_prompt:-1\", \"shift+right=adjust_selection:right\", \"super+comma=open_config\", \"super+shift+comma=reload_config\", \"super+minus=decrease_font_size:1\", \"shift+page_down=adjust_selection:page_down\", \"super+a=select_all\", \"alt+shift+equal=equalize_splits\", \"super+shift+enter=toggle_split_zoom\", \"super+alt+down=goto_split:bottom\", \"super+ctrl+f=toggle_fullscreen\", \"super+ctrl+right=resize_split:right,10\", \"super+alt+shift+j=write_scrollback_file:open\", \"shift+down=adjust_selection:down\", \"super+n=new_window\", \"super+alt+left=goto_split:left\", \"super+page_down=scroll_page_down\", \"super+alt+shift+w=close_all_windows\", \"super+alt+up=goto_split:top\", \"super+left_bracket=goto_split:previous\", \"super+physical:nine=goto_tab:9\", \"super+right_bracket=goto_split:next\", \"super+end=scroll_to_bottom\", \"super+shift+j=write_scrollback_file:paste\", \"super+shift+d=new_split:down\", \"super+zero=reset_font_size\", \"super+physical:five=goto_tab:5\", \"shift+home=adjust_selection:home\", \"super+physical:seven=goto_tab:7\", \"super+k=clear_screen\", \"super+physical:two=goto_tab:2\", \"super+physical:six=goto_tab:6\", \"super+v=paste_from_clipboard\"]}\n                ]\n            }\n        ]\n    },\n    {\n        id: \"mouse\",\n        name: \"Mouse\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"cursorClickToMove\", name: \"Enable click to move cursor\", type: \"switch\", value: true},\n                    {id: \"mouseHideWhileTyping\", name: \"Hide mouse while typing\", type: \"switch\", value: false},\n                    {id: \"mouseShiftCapture\", name: \"Allow shift with mouse click\", type: \"dropdown\", value: \"false\", options: [\"true\", \"false\", \"always\", \"never\"]},\n                    // Technically the values should be min: 0.01, max: 10000, step: 0.01 but those are insane so instead I'll use sane defaults\n                    {id: \"mouseScrollMultiplier\", name: \"Mouse scroll multiplier\", type: \"number\", range: true, value: 1, min: 0.1, max: 10, step: 0.1},\n                    {id: \"focusFollowsMouse\", name: \"Focus splits on mouse move\", type: \"switch\", value: false},\n                    {id: \"clickRepeatInterval\", name: \"Milliseconds between multi-click\", note: \"A value of 0 means to use the operating system's default timing.\", type: \"number\", value: 0, min: 0, size: 4},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"gtk\",\n        name: \"GTK\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"class\", name: \"WM_CLASS class field\", note: \"This defaults to `com.mitchellh.ghostty`\", type: \"text\", value: \"\"},\n                    {id: \"x11InstanceName\", name: \"WM_CLASS instance name\", note: \"This defaults to `ghostty`\", type: \"text\", value: \"\"},\n                    {id: \"gtkSingleInstance\", name: \"Single-instance mode\", type: \"dropdown\", value: \"desktop\", options: [{name: \"detect\", value: \"desktop\"}, \"true\", \"false\"]},\n                    {id: \"gtkTitlebar\", name: \"Show titlebar\", type: \"switch\", value: true},\n                    {id: \"gtkTabsLocation\", name: \"Tab location\", type: \"dropdown\", value: \"top\", options: [\"top\", \"right\", \"bottom\", \"left\"]},\n                    {id: \"gtkWideTabs\", name: \"Use wide tabs\", type: \"switch\", value: true},\n                    {id: \"gtkAdwaita\", name: \"Enable adwaita theme support\", type: \"switch\", value: true},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"linux\",\n        name: \"Linux\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"linuxCgroup\", name: \"Use dedicated cgroups\", type: \"dropdown\", value: \"single-instance\", options: [\"single-instance\", \"always\", \"never\"]},\n                    {id: \"linuxCgroupMemoryLimit\", name: \"Memory limit (bytes)\", type: \"number\", min: 0, max: 4294967295, size: 12},\n                    {id: \"linuxCgroupProcessLimit\", name: \"Max number of processes\", type: \"number\", min: 0, size: 5},\n                    {id: \"linuxCgroupHardFail\", name: \"Hard fail on startup\", type: \"switch\", value: false},\n                ]\n            }\n        ]\n    },\n    {\n        id: \"macos\",\n        name: \"macOS\",\n        groups: [\n            {\n                id: \"main\",\n                name: \"\",\n                settings: [\n                    {id: \"macosNonNativeFullscreen\", name: \"Use non-native fullscreen\", note: \"Tabs currently do not work with non-native fullscreen windows\", type: \"dropdown\", value: \"false\", options: [\"visible-menu\", \"true\", \"false\"]},\n                    {id: \"macosTitlebarStyle\", name: \"Titlebar style\", type: \"dropdown\", value: \"transparent\", options: [\"transparent\", \"native\", \"tabs\"]},\n                    {id: \"macosOptionAsAlt\", name: \"Use option key as alt key\", type: \"dropdown\", value: \"false\", options: [\"true\", \"false\", \"left\", \"right\"]},\n                    {id: \"macosWindowShadow\", name: \"Show the window shadow\", type: \"switch\", value: true},\n                ]\n            }\n        ]\n    },\n] as Panel[];\n```\n```typescript\nimport config from \"$lib/stores/config.svelte\";\n// error: 'config' is defined but never used. Allowed unused vars must match /^_/u.\nimport type {HexColor} from \"$lib/utils/colors\";\n\n```\n\n\n```ts ghostty-config/src/lib/stores/config.svelte.ts\nimport {dev} from \"$app/environment\";\nimport settings, {type KeybindString} from \"$lib/data/settings\";\nimport type {HexColor} from \"$lib/utils/colors\";\nimport themeHandler from \"$lib/utils/themeHandler\";\n// import defs from \"../data/defaults.json\";\n\n// TODO: find a good way to properly type the config\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaults: Partial<Record<keyof DefaultConfig, any>> = {};\n\nfor (const panel of settings) {\n    for (const group of panel.groups) {\n        for (const setting of group.settings) {\n            defaults[setting.id as keyof typeof defaults] = setting.value;\n        }\n    }\n}\n\nif (dev) {\n    // eslint-disable-next-line no-console\n    console.log(defaults);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst config = $state(Object.assign({}, defaults)) as Record<keyof DefaultConfig, any>;\n\n\nexport function keyToConfig(key: string) {\n    return key.replaceAll(/([A-Z])/g, \"-$1\").toLowerCase();\n}\n\nexport function diff() {\n    // TODO: more elegance\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const output: Partial<Record<keyof typeof defaults|string, any>> = {};\n\n    for (const k in config) {\n        const key = k as keyof DefaultConfig;\n        if (Array.isArray(config[key]) && key === \"keybind\") {\n            const toAdd = config[key].filter(c => !defaults[key].includes(c));\n            if (toAdd.length) output[keyToConfig(key)] = toAdd;\n        }\n        else if (Array.isArray(config[key]) && key === \"palette\") {\n            const toAdd = [];\n            for (let p = 0; p < defaults[key].length; p++) {\n                if (config[key][p] === defaults[key][p]) continue;\n                toAdd.push(`${p}=${config[key][p]}`);\n            }\n            // const toAdd = config[key].filter(c => !defaults[key].includes(c));\n            if (toAdd.length) output[keyToConfig(key)] = toAdd;\n        }\n        else if (config[key] != defaults[key]) {\n            output[keyToConfig(key)] = config[key];\n        }\n    }\n\n    return output;\n}\n\nexport function load(conf: Partial<typeof config>) {\n    for (const key in conf) {\n        if (!(key in config)) continue;\n        if (key !== \"keybind\" && key !== \"palette\") {\n            config[key as keyof typeof config] = conf[key as keyof typeof config];\n\n            if (key === \"theme\") {\n                themeHandler(conf[key] as string);\n            }\n        }\n        else if (key === \"keybind\") {\n            config.keybind = [...config.keybind, ...conf.keybind];\n        }\n        else if (key === \"palette\") {\n            for (let p = 0; p < conf.palette.length; p++) {\n                if (!conf.palette[p]) continue;\n                config.palette[p] = conf.palette[p];\n            }\n        }\n    }\n}\n\nexport default config;\n\n\n// TODO: is this useful?\ninterface DefaultConfig {\n    palette: HexColor[];\n    keybind: KeybindString[];\n    fontFamily: string;\n    fontFamilyBold: string;\n    fontFamilyItalic: string;\n    fontFamilyBoldItalic: string;\n    fontStyle: string;\n    fontStyleBold: string;\n    fontStyleItalic: string;\n    fontStyleBoldItalic: string;\n    fontFeature: string;\n    fontSize: number;\n    fontVariation: string;\n    fontVariationBold: string;\n    fontVariationItalic: string;\n    fontVariationBoldItalic: string;\n    fontCodepointMap: string;\n    fontThicken: boolean;\n    adjustCellWidth: string;\n    adjustCellHeight: string;\n    adjustFontBaseline: string;\n    adjustUnderlinePosition: string;\n    adjustUnderlineThickness: string;\n    adjustStrikethroughPosition: string;\n    adjustStrikethroughThickness: string;\n    adjustCursorThickness: string;\n    graphemeWidthMethod: string;\n    theme: string;\n    background: HexColor;\n    foreground: HexColor;\n    selectionForeground: string;\n    selectionBackground: string;\n    selectionInvertFgBg: boolean;\n    minimumContrast: number;\n    cursorColor: string;\n    cursorInvertFgBg: boolean;\n    cursorOpacity: number;\n    cursorStyle: string;\n    cursorStyleBlink: string;\n    cursorText: string;\n    cursorClickToMove: boolean;\n    mouseHideWhileTyping: boolean;\n    mouseShiftCapture: boolean;\n    mouseScrollMultiplier: number;\n    backgroundOpacity: number;\n    backgroundBlurRadius: number;\n    unfocusedSplitOpacity: number;\n    unfocusedSplitFill: string;\n    command: string;\n    waitAfterCommand: boolean;\n    abnormalCommandExitRuntime: number;\n    scrollbackLimit: number;\n    linkUrl: boolean;\n    fullscreen: boolean;\n    title: string;\n    class: string;\n    workingDirectory: string;\n    windowPaddingX: number;\n    windowPaddingY: number;\n    windowPaddingBalance: boolean;\n    windowPaddingColor: string;\n    windowVsync: boolean;\n    windowInheritWorkingDirectory: boolean;\n    windowInheritFontSize: boolean;\n    windowDecoration: boolean;\n    windowTitleFontFamily: string;\n    windowTheme: string;\n    windowColorspace: string;\n    windowHeight: number;\n    windowWidth: number;\n    windowSaveState: string;\n    windowStepResize: boolean;\n    windowNewTabPosition: string;\n    resizeOverlay: string;\n    resizeOverlayPosition: string;\n    resizeOverlayDuration: string;\n    focusFollowsMouse: boolean;\n    clipboardRead: string;\n    clipboardWrite: string;\n    clipboardTrimTrailingSpaces: boolean;\n    clipboardPasteProtection: boolean;\n    clipboardPasteBracketedSafe: boolean;\n    imageStorageLimit: number;\n    copyOnSelect: boolean;\n    clickRepeatInterval: number;\n    configFile: string;\n    configDefaultFiles: boolean;\n    confirmCloseSurface: boolean;\n    quitAfterLastWindowClosed: boolean;\n    quitAfterLastWindowClosedDelay: string;\n    initialWindow: boolean;\n    shellIntegration: string;\n    shellIntegrationFeatures: string;\n    oscColorReportFormat: string;\n    vtKamAllowed: boolean;\n    customShader: string;\n    customShaderAnimation: boolean;\n    macosNonNativeFullscreen: boolean;\n    macosTitlebarStyle: string;\n    macosOptionAsAlt: boolean;\n    macosWindowShadow: boolean;\n    linuxCgroup: string;\n    linuxCgroupMemoryLimit: string;\n    linuxCgroupProcessesLimit: string;\n    linuxCgroupHardFail: boolean;\n    gtkSingleInstance: string;\n    gtkTitlebar: boolean;\n    gtkTabsLocation: string;\n    gtkWideTabs: boolean;\n    gtkAdwaita: boolean;\n    desktopNotifications: boolean;\n    boldIsBright: boolean;\n    term: string;\n    enquiryResponse: string;\n}\n```\n\n\n```ts ghostty-config/src/lib/utils/themeHandler.ts\nimport type {HexColor} from \"$lib/utils/colors\";\nimport config from \"$lib/stores/config.svelte\";\nimport {fetchColorScheme, parseColorScheme} from \"$lib/data/settings\";\n\nexport default async function themeHandler(themeName: string) {\n    const {colorSchemeResponse} = await fetchColorScheme(themeName);\n    const colorScheme = parseColorScheme(colorSchemeResponse);\n\n    const colorProperties = [\n        \"background\",\n        \"foreground\",\n        \"selectionBackground\",\n        \"selectionForeground\",\n        \"cursorColor\"\n    ] as const;\n\n    colorProperties.forEach((prop) => {\n        if (colorScheme[prop]) config[prop] = colorScheme[prop] as HexColor;\n    });\n\n    if (colorScheme.palette) {\n        config.palette = Array(256).fill(\"#000000\") as HexColor[];\n        for (const [index, color] of Object.entries(colorScheme.palette)) {\n            config.palette[+index] = color as HexColor;\n        }\n    }\n}\n```\n\n\nThank you for providing the additional context. I see that the theme handling logic is already implemented in the `themeHandler.ts` file. The issue you're experiencing with the color palette not updating when selecting a theme from the dropdown menu might be due to how the changes are being propagated.\n\nLet's modify the `themeHandler` function to ensure it's updating the config correctly and triggering a re-render:\n\n1. Update the `themeHandler.ts` file:\n\n```typescript\nimport type { HexColor } from \"$lib/utils/colors\";\nimport config from \"$lib/stores/config.svelte\";\nimport { fetchColorScheme, parseColorScheme } from \"$lib/data/settings\";\n\nexport default async function themeHandler(themeName: string) {\n    try {\n        const { colorSchemeResponse } = await fetchColorScheme(themeName);\n        const colorScheme = parseColorScheme(colorSchemeResponse);\n\n        const colorProperties = [\n            \"background\",\n            \"foreground\",\n            \"selectionBackground\",\n            \"selectionForeground\",\n            \"cursorColor\"\n        ] as const;\n\n        colorProperties.forEach((prop) => {\n            if (colorScheme[prop]) config[prop] = colorScheme[prop] as HexColor;\n        });\n\n        if (colorScheme.palette) {\n            const newPalette = Array(256).fill(\"#000000\") as HexColor[];\n            for (const [index, color] of Object.entries(colorScheme.palette)) {\n                newPalette[+index] = color as HexColor;\n            }\n            config.palette = newPalette;\n        }\n\n        // Force a re-render by updating the theme property\n        config.theme = themeName;\n    } catch (error) {\n        console.error(\"Error applying theme:\", error);\n    }\n}\n```\n\n2. In the `config.svelte.ts` file, ensure that the `load` function is calling `themeHandler`:\n\n```typescript\nexport function load(conf: Partial<typeof config>) {\n    for (const key in conf) {\n        if (!(key in config)) continue;\n        if (key !== \"keybind\" && key !== \"palette\") {\n            config[key as keyof typeof config] = conf[key as keyof typeof config];\n\n            if (key === \"theme\") {\n                themeHandler(conf[key] as string);\n            }\n        }\n        else if (key === \"keybind\") {\n            config.keybind = [...config.keybind, ...conf.keybind];\n        }\n        else if (key === \"palette\") {\n            config.palette = [...conf.palette];\n        }\n    }\n}\n```\n\n3. Make sure that the component rendering the color palette is reactive to changes in `config.palette`. If you're using Svelte, you might want to use the `$:` reactive statement to update the UI when the palette changes.\n\n4. If you're still experiencing issues, you might need to trigger a manual re-render of the component that displays the color palette. You can do this by adding a dummy reactive variable that changes whenever the theme is updated.\n\nThese changes should ensure that when a new theme is selected from the dropdown, the color palette and other theme-related properties are updated correctly in the config, and the UI is re-rendered to reflect these changes.\n\nIf you're still encountering issues, please provide more information about how the color palette is being displayed in your UI, and I'll be happy to offer more specific advice.\nI still do not see the values being updated\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":824}}},{"id":{"replica_id":0,"value":61},"start":37109,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":825}}},{"id":{"replica_id":0,"value":62},"start":39520,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":826}}},{"id":{"replica_id":0,"value":117},"start":39547,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":827}}},{"id":{"replica_id":0,"value":118},"start":42849,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":828}}},{"id":{"replica_id":0,"value":157},"start":42886,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":829}}},{"id":{"replica_id":0,"value":158},"start":46187,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":830}}},{"id":{"replica_id":0,"value":327},"start":84598,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":831}}},{"id":{"replica_id":0,"value":328},"start":87681,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":832}}},{"id":{"replica_id":0,"value":632},"start":125837,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":833}}},{"id":{"replica_id":0,"value":633},"start":129094,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":834}}}],"summary":"Theme selection and color scheme application","slash_command_output_sections":[{"range":{"start":114,"end":6375},"icon":"File","label":"ghostty-config/src/lib/stores/config.svelte.ts","metadata":{"path":"ghostty-config/src/lib/stores/config.svelte.ts"}},{"range":{"start":6376,"end":37106},"icon":"File","label":"ghostty-config/src/lib/data/settings.ts","metadata":{"path":"ghostty-config/src/lib/data/settings.ts"}},{"range":{"start":36830,"end":37105},"icon":"XCircle","label":"'colorScheme' is assigned a value but never used. Allowed unused vars must match /^_/u.","metadata":null},{"range":{"start":46222,"end":53850},"icon":"File","label":"ghostty-config/src/lib/stores/config.svelte.ts","metadata":{"path":"ghostty-config/src/lib/stores/config.svelte.ts"}},{"range":{"start":52687,"end":52964},"icon":"XCircle","label":"'themeWatcher' is assigned a value but never used. Allowed unused vars must match /^_/u.","metadata":null},{"range":{"start":52965,"end":53206},"icon":"XCircle","label":"Cannot find name 'derived'. Did you mean '$derived'?","metadata":null},{"range":{"start":53207,"end":53421},"icon":"XCircle","label":"'derived' is not defined.","metadata":null},{"range":{"start":53422,"end":53636},"icon":"XCircle","label":"Parameter 'theme' implicitly has an 'any' type.","metadata":null},{"range":{"start":53637,"end":53849},"icon":"XCircle","label":"Parameter 'set' implicitly has an 'any' type.","metadata":null},{"range":{"start":53852,"end":84596},"icon":"File","label":"ghostty-config/src/lib/data/settings.ts","metadata":{"path":"ghostty-config/src/lib/data/settings.ts"}},{"range":{"start":84320,"end":84595},"icon":"XCircle","label":"'colorScheme' is assigned a value but never used. Allowed unused vars must match /^_/u.","metadata":null},{"range":{"start":87773,"end":118447},"icon":"File","label":"ghostty-config/src/lib/data/settings.ts","metadata":{"path":"ghostty-config/src/lib/data/settings.ts"}},{"range":{"start":118247,"end":118446},"icon":"XCircle","label":"'config' is defined but never used. Allowed unused vars must match /^_/u.","metadata":null},{"range":{"start":118449,"end":124863},"icon":"File","label":"ghostty-config/src/lib/stores/config.svelte.ts","metadata":{"path":"ghostty-config/src/lib/stores/config.svelte.ts"}},{"range":{"start":124865,"end":125835},"icon":"File","label":"ghostty-config/src/lib/utils/themeHandler.ts","metadata":{"path":"ghostty-config/src/lib/utils/themeHandler.ts"}}]}